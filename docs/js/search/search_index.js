var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/DiscordRankup.html",[0,0.848,1,0.635]],["body/classes/DiscordRankup.html",[0,0.795,1,0.655,2,0.592,3,0.327,4,0.327,5,0.249,6,0.432,7,1.315,8,1.383,9,1.383,10,1.383,11,0.249,12,0.327,13,2.077,14,3.573,15,2.313,16,1.383,17,1.036,18,3.409,19,1.383,20,1.383,21,1.383,22,2.077,23,1.888,24,1.036,25,1.383,26,1.383,27,1.383,28,1.383,29,1.199,30,0.11,31,3.123,32,0.592,33,0.429,34,1.591,35,0.592,36,2.376,37,1.736,38,1.453,39,0.592,40,3.659,41,1.54,42,1.196,43,1.332,44,2.173,45,1.364,46,0.592,47,1.379,48,1.453,49,2.081,50,1.199,51,1.199,52,0.705,53,1.199,54,2.495,55,2.495,56,1.823,57,1.213,58,1.383,59,1.484,60,1.444,61,1.612,62,1.348,63,1.518,64,1.736,65,1.66,66,0.97,67,2.077,68,2.077,69,2.077,70,3.304,71,2.392,72,1.9,73,2.081,74,0.592,75,0.592,76,1.518,77,1.922,78,1.383,79,1.888,80,2.238,81,0.592,82,0.592,83,1.01,84,0.757,85,1.036,86,0.592,87,1.383,88,1.036,89,0.592,90,0.592,91,0.611,92,0.757,93,1.036,94,0.592,95,1.383,96,0.592,97,2.238,98,1.383,99,0.592,100,1.383,101,0.582,102,2.376,103,0.592,104,0.592,105,2.238,106,0.592,107,0.592,108,1.383,109,2.238,110,0.592,111,0.592,112,1.888,113,0.919,114,0.757,115,0.592,116,1.036,117,0.573,118,3.409,119,2.6,120,0.592,121,0.592,122,1.967,123,2.692,124,0.592,125,0.592,126,0.592,127,0.432,128,0.919,129,1.823,130,1.66,131,0.432,132,1.888,133,1.66,134,0.592,135,1.036,136,0.592,137,2.495,138,1.036,139,1.036,140,1.036,141,1.036,142,1.036,143,1.036,144,2.077,145,0.592,146,2.077,147,1.383,148,1.383,149,0.592,150,0.592,151,0.592,152,0.592,153,0.028,154,0.028]],["title/interfaces/RankupEvents.html",[155,0.458,156,0.848]],["body/interfaces/RankupEvents.html",[1,1.021,3,1.239,4,1.239,5,0.942,7,1.364,11,0.942,12,0.918,29,1.226,30,0.11,33,0.508,34,1.226,38,1.226,41,0.942,42,0.918,43,1.226,45,1.226,48,1.564,50,1.444,51,1.444,52,0.918,53,1.444,59,0.942,60,1.226,61,1.239,62,0.942,66,0.918,77,1.899,91,0.779,113,1.239,117,1.612,128,1.612,153,0.079,154,0.079,155,0.779,156,1.364,157,1.239,158,1.239,159,1.793,160,2.056,161,1.444,162,1.612,163,1.635,164,1.635]],["title/interfaces/XPMember.html",[91,0.458,155,0.458]],["body/interfaces/XPMember.html",[1,0.907,3,1.215,4,1.215,5,0.924,7,1.351,11,0.924,12,0.907,29,1.434,30,0.11,33,0.498,34,1.527,38,1.351,41,1.434,42,1.143,43,1.527,45,1.211,48,1.579,50,0.924,51,1.211,52,0.692,53,1.211,59,1.434,60,1.434,61,1.592,62,1.211,66,1.143,77,1.957,91,0.803,113,1.215,117,1.592,128,1.776,153,0.078,154,0.078,155,0.773,156,1.211,157,1.215,158,1.215,159,1.592,160,1.885,161,0.924,162,1.215,163,1.604,164,1.604]],["title/coverage.html",[165,1.986]],["body/coverage.html",[0,1.224,1,0.917,5,1.224,6,2.125,29,1.224,30,0.104,72,2.125,91,0.66,153,0.093,154,0.093,155,0.778,156,1.224,158,1.897,165,2.125,166,2.125,167,2.908,168,2.908,169,3.645,170,2.908,171,2.908,172,2.908,173,2.908,174,2.908]],["title/dependencies.html",[101,0.715,175,1.764]],["body/dependencies.html",[30,0.104,33,0.7,114,2.254,153,0.096,154,0.096,175,2.254,176,3.084,177,3.084]],["title/index.html",[11,0.715,178,1.699,179,1.699]],["body/index.html",[15,1.491,30,0.1,33,0.463,34,1.154,37,1.491,38,1.303,41,1.453,42,1.12,43,1.154,44,2.418,45,1.393,47,2.418,48,1.529,49,1.491,50,0.859,51,1.154,52,0.864,53,1.154,56,2.003,57,1.491,59,1.154,60,1.154,62,0.859,63,2.003,64,1.491,66,0.643,71,1.491,73,2.262,76,2.003,83,1.491,84,1.491,91,0.622,92,1.491,101,1.154,122,2.262,127,1.491,129,1.491,131,1.491,153,0.074,154,0.074,155,0.463,159,1.517,160,1.517,161,1.574,166,1.491,180,2.654,181,2.041,182,2.003,183,2.041,184,2.041,185,2.741,186,3.309,187,2.041,188,3.095,189,2.041,190,2.041,191,2.041,192,2.041,193,2.041,194,2.041,195,2.041,196,2.041,197,2.041,198,2.041,199,2.041,200,2.041,201,2.041,202,2.041,203,2.041,204,2.041,205,2.041,206,2.041,207,2.041,208,2.041,209,2.041,210,2.041,211,2.041,212,2.041,213,2.041,214,2.041,215,2.041,216,2.041,217,2.041,218,2.041,219,3.309,220,2.041,221,2.041,222,2.041,223,2.041,224,2.041,225,3.095,226,2.041,227,2.041,228,2.041,229,2.041,230,2.041,231,2.041,232,2.041,233,2.041,234,2.041,235,2.041,236,2.041,237,2.041]],["title/modules.html",[238,1.986]],["body/modules.html",[30,0.097,153,0.097,154,0.097,238,2.295]],["title/overview.html",[239,1.986]],["body/overview.html",[0,1.306,30,0.096,153,0.096,154,0.096,157,1.717,239,2.268,240,3.103,241,3.103]],["title/properties.html",[12,0.761,101,0.715]],["body/properties.html",[7,1.193,12,0.894,30,0.108,33,0.767,42,1.064,52,0.894,66,0.894,153,0.091,154,0.091,161,1.193,162,1.569,180,2.072,182,2.072,242,2.836,243,2.836,244,2.836,245,2.836,246,2.836,247,2.836,248,2.836,249,2.836,250,3.377,251,2.836,252,2.836,253,2.836,254,2.836,255,2.836,256,2.836]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":109,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["0.9.3",{"_index":243,"title":{},"body":{"properties.html":{}}}],["1",{"_index":240,"title":{},"body":{"overview.html":{}}}],["100",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["14.8.0",{"_index":176,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":241,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":171,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":172,"title":{},"body":{"coverage.html":{}}}],["7.0.1",{"_index":177,"title":{},"body":{"dependencies.html":{}}}],["acts",{"_index":9,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["add",{"_index":47,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["added",{"_index":194,"title":{},"body":{"index.html":{}}}],["addxp",{"_index":19,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["addxp(userid",{"_index":39,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["affecting",{"_index":68,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["allows",{"_index":181,"title":{},"body":{"index.html":{}}}],["already",{"_index":230,"title":{},"body":{"index.html":{}}}],["amount",{"_index":62,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["async",{"_index":18,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["author",{"_index":255,"title":{},"body":{"properties.html":{}}}],["await",{"_index":123,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["baseinteraction",{"_index":163,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["basic",{"_index":207,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":135,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["bot",{"_index":183,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":249,"title":{},"body":{"properties.html":{}}}],["built",{"_index":198,"title":{},"body":{"index.html":{}}}],["called",{"_index":69,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["cause",{"_index":45,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["cause)xp.fetchxp(userid",{"_index":224,"title":{},"body":{"index.html":{}}}],["cause)xp.setxp(userid",{"_index":223,"title":{},"body":{"index.html":{}}}],["check",{"_index":126,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["class",{"_index":0,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["client",{"_index":15,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["client);once",{"_index":214,"title":{},"body":{"index.html":{}}}],["client.on('levelup",{"_index":235,"title":{},"body":{"index.html":{}}}],["come",{"_index":234,"title":{},"body":{"index.html":{}}}],["connect",{"_index":102,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["const",{"_index":129,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["continue",{"_index":141,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["coverage",{"_index":165,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":76,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["createmember",{"_index":20,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["createmember(userid",{"_index":74,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["customizable",{"_index":196,"title":{},"body":{"index.html":{}}}],["database",{"_index":38,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["defined",{"_index":31,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["delete",{"_index":83,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deleted",{"_index":84,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deletemember",{"_index":21,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["deletemember(userid",{"_index":81,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["dependencies",{"_index":175,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["development",{"_index":193,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":22,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["disconnects",{"_index":87,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["discord",{"_index":180,"title":{},"body":{"index.html":{},"properties.html":{}}}],["discord.js",{"_index":33,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["discordrankup",{"_index":1,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["documentation",{"_index":166,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":138,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["don't",{"_index":78,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["done",{"_index":215,"title":{},"body":{"index.html":{}}}],["early",{"_index":192,"title":{},"body":{"index.html":{}}}],["easy",{"_index":185,"title":{},"body":{"index.html":{}}}],["emit",{"_index":49,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitevent",{"_index":44,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitted",{"_index":160,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["event",{"_index":51,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["events",{"_index":159,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["exist",{"_index":79,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exists",{"_index":127,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["export",{"_index":117,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["false",{"_index":131,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["features",{"_index":188,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":23,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetch(userid",{"_index":89,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["few",{"_index":232,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["first",{"_index":209,"title":{},"body":{"index.html":{}}}],["following",{"_index":227,"title":{},"body":{"index.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["gain",{"_index":221,"title":{},"body":{"index.html":{}}}],["getlevelfromxp",{"_index":24,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getlevelfromxp(xp",{"_index":93,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getting",{"_index":178,"title":{"index.html":{}},"body":{}}],["guild",{"_index":61,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["guild's",{"_index":220,"title":{},"body":{"index.html":{}}}],["guildid",{"_index":41,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["guildid)this",{"_index":225,"title":{},"body":{"index.html":{}}}],["here",{"_index":206,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":246,"title":{},"body":{"properties.html":{}}}],["https://discord",{"_index":247,"title":{},"body":{"properties.html":{}}}],["https://github.com/x404dev/discord",{"_index":250,"title":{},"body":{"properties.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["identifier",{"_index":167,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":113,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["init",{"_index":25,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["init(url",{"_index":96,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initialize",{"_index":100,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initiate",{"_index":211,"title":{},"body":{"index.html":{}}}],["install",{"_index":201,"title":{},"body":{"index.html":{}}}],["installation",{"_index":199,"title":{},"body":{"index.html":{}}}],["interface",{"_index":155,"title":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":157,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"overview.html":{}}}],["isc",{"_index":253,"title":{},"body":{"properties.html":{}}}],["keywords",{"_index":245,"title":{},"body":{"properties.html":{}}}],["less",{"_index":149,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["level",{"_index":66,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levels",{"_index":52,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levelup",{"_index":50,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["license",{"_index":252,"title":{},"body":{"properties.html":{}}}],["lightweight",{"_index":195,"title":{},"body":{"index.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["make",{"_index":189,"title":{},"body":{"index.html":{}}}],["manager",{"_index":10,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["managing",{"_index":217,"title":{},"body":{"index.html":{}}}],["many",{"_index":187,"title":{},"body":{"index.html":{}}}],["matching",{"_index":154,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(0.05",{"_index":151,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["math.sqrt(xp",{"_index":152,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member",{"_index":77,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["member's",{"_index":80,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate",{"_index":137,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.level",{"_index":146,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.save",{"_index":148,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.xp",{"_index":144,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["message",{"_index":164,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["method",{"_index":228,"title":{},"body":{"index.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["model",{"_index":128,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["models/xpmember",{"_index":115,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["modules",{"_index":238,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongodb",{"_index":37,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["mongoose",{"_index":114,"title":{},"body":{"classes/DiscordRankup.html":{},"dependencies.html":{}}}],["mongoose.connect(url",{"_index":124,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.connectoptions",{"_index":98,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.disconnect",{"_index":125,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongourl",{"_index":16,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["more",{"_index":233,"title":{},"body":{"index.html":{}}}],["name",{"_index":55,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["need",{"_index":210,"title":{},"body":{"index.html":{}}}],["new",{"_index":72,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["newmember",{"_index":132,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.save",{"_index":134,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["note",{"_index":191,"title":{},"body":{"index.html":{}}}],["npm",{"_index":200,"title":{},"body":{"index.html":{}}}],["number",{"_index":43,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["object",{"_index":92,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["optional",{"_index":56,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["options",{"_index":97,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["overview",{"_index":239,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":101,"title":{"dependencies.html":{},"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["param",{"_index":118,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["parameters",{"_index":54,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["pnpm",{"_index":203,"title":{},"body":{"index.html":{}}}],["private",{"_index":13,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["promise",{"_index":71,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["public",{"_index":119,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["ranks",{"_index":162,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["rankup",{"_index":161,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["rankup.js.org",{"_index":248,"title":{},"body":{"properties.html":{}}}],["rankup/issues",{"_index":251,"title":{},"body":{"properties.html":{}}}],["rankupdocumentation",{"_index":204,"title":{},"body":{"index.html":{}}}],["rankupevents",{"_index":156,"title":{"interfaces/RankupEvents.html":{}},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["remove",{"_index":105,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp",{"_index":26,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp(userid",{"_index":103,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["repository",{"_index":254,"title":{},"body":{"properties.html":{}}}],["require('discord",{"_index":212,"title":{},"body":{"index.html":{}}}],["reset",{"_index":108,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp",{"_index":27,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp(userid",{"_index":106,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resolve",{"_index":140,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["results",{"_index":153,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":122,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["returns",{"_index":70,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["save",{"_index":133,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["set",{"_index":112,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp",{"_index":28,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp(userid",{"_index":110,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["simple",{"_index":244,"title":{},"body":{"properties.html":{}}}],["snowflake",{"_index":40,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["something",{"_index":236,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["specified",{"_index":95,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts",{"_index":6,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["src/index.ts:102",{"_index":46,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:142",{"_index":104,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:16",{"_index":35,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:181",{"_index":111,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:21",{"_index":32,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:219",{"_index":107,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:232",{"_index":94,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:243",{"_index":90,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:30",{"_index":99,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:46",{"_index":86,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:57",{"_index":75,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:81",{"_index":82,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/types/types.ts",{"_index":158,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["start",{"_index":216,"title":{},"body":{"index.html":{}}}],["started",{"_index":179,"title":{"index.html":{}},"body":{}}],["statements",{"_index":168,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["successfully",{"_index":85,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["system",{"_index":182,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":174,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":173,"title":{},"body":{"coverage.html":{}}}],["this.client",{"_index":121,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.client.emit('levelup",{"_index":147,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.createmember(userid",{"_index":142,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.getlevelfromxp(membertoupdate.xp",{"_index":145,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.mongourl",{"_index":120,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.setxp(userid",{"_index":150,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["true",{"_index":63,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["types",{"_index":237,"title":{},"body":{"index.html":{}}}],["types/types",{"_index":116,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["unique",{"_index":190,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":88,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["up",{"_index":53,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["update",{"_index":143,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["url",{"_index":36,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["usage",{"_index":208,"title":{},"body":{"index.html":{}}}],["use",{"_index":186,"title":{},"body":{"index.html":{}}}],["user",{"_index":48,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["user's",{"_index":73,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["userid",{"_index":59,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["uses",{"_index":197,"title":{},"body":{"index.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["version",{"_index":242,"title":{},"body":{"properties.html":{}}}],["very",{"_index":184,"title":{},"body":{"index.html":{}}}],["view",{"_index":205,"title":{},"body":{"index.html":{}}}],["wait",{"_index":139,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["want",{"_index":226,"title":{},"body":{"index.html":{}}}],["whether",{"_index":64,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["x404dev",{"_index":256,"title":{},"body":{"properties.html":{}}}],["xp",{"_index":42,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["xp.addxp(userid",{"_index":218,"title":{},"body":{"index.html":{}}}],["xp.createmember(userid",{"_index":229,"title":{},"body":{"index.html":{}}}],["xp.deletemember(userid",{"_index":231,"title":{},"body":{"index.html":{}}}],["xp.init(\"mongourl",{"_index":213,"title":{},"body":{"index.html":{}}}],["xp.removexp(userid",{"_index":222,"title":{},"body":{"index.html":{}}}],["xpamount",{"_index":219,"title":{},"body":{"index.html":{}}}],["xpmember",{"_index":91,"title":{"interfaces/XPMember.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["xpmember.findone",{"_index":130,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["xpmember.findoneanddelete",{"_index":136,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["yarn",{"_index":202,"title":{},"body":{"index.html":{}}}],["yes",{"_index":65,"title":{},"body":{"classes/DiscordRankup.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DiscordRankup.html":{"url":"classes/DiscordRankup.html","title":"class - DiscordRankup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordRankup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                The main class for DiscordRankup, acts as a manager.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                client\n                            \n                            \n                                    Private\n                                    Static\n                                mongoURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                addXP\n                            \n                            \n                                    Static\n                                    Async\n                                createMember\n                            \n                            \n                                    Static\n                                    Async\n                                deleteMember\n                            \n                            \n                                    Static\n                                    Async\n                                disconnect\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Static\n                                getLevelFromXP\n                            \n                            \n                                    Static\n                                    Async\n                                init\n                            \n                            \n                                    Static\n                                    Async\n                                removeXP\n                            \n                            \n                                    Static\n                                    Async\n                                resetXP\n                            \n                            \n                                    Static\n                                    Async\n                                setXP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:21\n                        \n                    \n\n            \n                \n                    The Discord.js client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        mongoURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:16\n                        \n                    \n\n            \n                \n                    The URL to the MongoDB database\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        addXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    addXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:102\n                \n            \n\n\n            \n                \n                    Add XP to the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to add\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        createMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:57\n                \n            \n\n\n            \n                \n                    Create a member in the database if they don't exist\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        deleteMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:81\n                \n            \n\n\n            \n                \n                    Delete a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Whether the member was deleted successfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:46\n                \n            \n\n\n            \n                \n                    Disconnects from the database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The promise to disconnect from the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:243\n                \n            \n\n\n            \n                \n                    fetch a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XPMember object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getLevelFromXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLevelFromXP(xp: number)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:232\n                \n            \n\n\n            \n                \n                    Returns a level from a specified XP amount\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XP amount\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The level\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(url: string, client: Client, options?: mongoose.ConnectOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:30\n                \n            \n\n\n            \n                \n                    Initialize the package and connect to the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The URL to the MongoDB database\n\n                                    \n                                \n                                \n                                    client\n                                    \n                                            Client\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Discord.js client\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            mongoose.ConnectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options to connect to the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The promise to connect to the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        removeXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:142\n                \n            \n\n\n            \n                \n                    Remove XP from the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to remove\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        resetXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetXP(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:219\n                \n            \n\n\n            \n                \n                    Reset the user's XP to 0\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        setXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:181\n                \n            \n\n\n            \n                \n                    Set the user's XP and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to set\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import mongoose from 'mongoose';\nimport xpmember from './models/xpmember';\nimport { XPMember } from './types/types';\nimport { Client, Snowflake } from 'discord.js';\n\n/**\n * The main class for DiscordRankup, acts as a manager.\n * @class DiscordRankup\n * @description The main class for DiscordRankup, acts as a manager.\n */\nexport default class DiscordRankup {\n  /**\n   * The URL to the MongoDB database\n   * @type {string}\n   */\n  private static mongoURL: string;\n  /**\n   * The Discord.js client\n   * @type {Client}\n   */\n  private static client: Client;\n  /**\n   * Initialize the package and connect to the database\n   * @param url The URL to the MongoDB database\n   * @param client The Discord.js client\n   * @param options The options to connect to the database\n   * @returns {Promise} The promise to connect to the database\n   * @description Initialize the package and connect to the database\n   */\n  public static async init(\n    url: string,\n    client: Client,\n    options?: mongoose.ConnectOptions,\n  ) {\n    // Connect to the database\n    this.mongoURL = url;\n    this.client = client;\n    return await mongoose.connect(url, options);\n  }\n\n  /**\n   * Disconnects from the database\n   * @returns {Promise} The promise to disconnect from the database\n   * @description Disconnects from the database\n   */\n  public static async disconnect() {\n    return await mongoose.disconnect();\n  }\n\n  /**\n   * Create a member in the database if they don't exist\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XP\n   * @description Create a member in the database if they don't exist\n   */\n  public static async createMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    // Check if the member exists on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    if (member) return false;\n    // Create a new member on mongoDB with XPMember model\n    const newMember = new xpmember({\n      UserID: userID,\n      GuildID: guildID,\n      XP: 0,\n      Level: 0,\n    });\n    // Save the member to the database\n    return newMember.save();\n  }\n\n  /**\n   * Delete a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {boolean} Whether the member was deleted successfully\n   */\n  public static async deleteMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    //delete the member from the database\n    const member = await xpmember.findOneAndDelete({\n      UserID: userID,\n      GuildID: guildID,\n    });\n    return !!member;\n  }\n\n  /**\n   * Add XP to the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to add\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   */\n  public static async addXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Add xp to the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP\n    memberToUpdate.XP += xp;\n    const level = this.getLevelFromXP(memberToUpdate.XP);\n    // Emit levelUp event if the user levels up\n    if (level > memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Remove XP from the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to remove\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   * @description Remove XP from the user\n   */\n  public static async removeXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Remove xp from the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP, if the user has less XP than the amount to remove, set it to 0\n    memberToUpdate.XP = memberToUpdate.XP - xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Set the user's XP and emit the levelUp event if the user levels up\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @param {number} xp The amount of XP to set\n   * @param {Boolean} emitEvent Whether to emit the levelUp event\n   * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns {number} The new amount of user's XP\n   */\n  public static async setXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    if (xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Reset the user's XP to 0\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {number} The new amount of user's XP\n   * @description Reset the user's XP to 0\n   */\n  public static async resetXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    return this.setXP(userID, guildID, 0);\n  }\n\n  /**\n   * Returns a level from a specified XP amount\n   * @param {number} xp The XP amount\n   * @returns {number} The level\n   * @description Returns a level from a specified XP amount\n   */\n  public static getLevelFromXP(xp: number): number {\n    return Math.floor(0.05 * Math.sqrt(xp));\n  }\n\n  /**\n   * fetch a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XPMember object\n   * @description Get the member's XP\n   */\n  public static async fetch(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    const member = xpmember.findOne({ UserID: userID, GuildID: guildID });\n    return member;\n  }\n}\n\nexport * from './types/types';\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RankupEvents.html":{"url":"interfaces/RankupEvents.html","title":"interface - RankupEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RankupEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The events emitted by DiscordRankup\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            levelUp\n                                        \n                                \n                                \n                                        \n                                            rankUp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        levelUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event emitted when a user levels up\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rankUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rankUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event emitted when a user ranks up\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n  /** The event emitted when a user ranks up */\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/XPMember.html":{"url":"interfaces/XPMember.html","title":"interface - XPMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  XPMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The model of a member in the database\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            GuildID\n                                        \n                                \n                                \n                                        \n                                            Level\n                                        \n                                \n                                \n                                        \n                                            UserID\n                                        \n                                \n                                \n                                        \n                                            XP\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        GuildID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        GuildID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the Guild\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The level of the user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        UserID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        UserID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the User\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        XP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        XP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The amount of XP the user has\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n  /** The event emitted when a user ranks up */\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/index.ts\n            \n            class\n            DiscordRankup\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            RankupEvents\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            XPMember\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            discord.js : ^14.8.0\n        \n            mongoose : ^7.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDiscord-RankUP\nDiscord-RankUP is a package that allows you to create a rankup system for your discord bot.\nIt is very easy to use and has a many features to make your rankup system unique!\nNote: This package is in early development, not all features have been added yet!\nFeatures\n\nLightweight\nEasy to use\nCustomizable\nUses MongoDB\nBuilt for Discord.Js\n\nInstallation\nnpm install discord-rankup\nyarn add discord-rankup\npnpm add discord-rankupDocumentation\nView the documentation here\nBasic Usage\nFirst you need to initiate the Rankup Client.\nconst xp = require('discord-rankup');\n\nxp.init(\"MONGOURL\", client);Once that is done, you can start managing the user's XP.\nxp.addXP(userID, guildID, xpAmount, emitEvent, cause)\nuserID: The user's ID\nguildID: The guild's ID\nxpAmount: The amount of XP to add\nemitEvent (optional, true by default): Whether or not to emit the event if the user levels up\ncause (optional): The cause of the XP gain, can be any object, it will be emitted in the event\n\nxp.removeXP(userID, guildID, xpAmount, emitEvent, cause)xp.setXP(userID, guildID, xpAmount, emitEvent, cause)xp.fetchXP(userID, guildID)This will return a promise with the user's XP.\nIf you want to add the user to the database, you can use the following method.\nxp.createMember(userID, guildID)This will create a user in the database, if the user already exists, it will return false.\nxp.deleteMember(userID, guildID)This will delete the user from the database, if the user was deleted, it will return true.\nEvents\nDiscord-RankUP has a few events that you can use.\n\nlevelUp: Emitted when a user levels up\n(More to come)\n\nclient.on('levelUp', (XPMember, cause) => {\n    // Do something\n})Types\ninterface XPMember {\n    userID: string;\n    guildID: string;\n    xp: number;\n    level: number;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.9.3\n        \n            Description : A simple discord.js xp and level system\n        \n            Keywords : discord, discord.js, ranks, levels, xp\n        \n            Homepage : https://discord-rankup.js.org/\n        \n            Bugs : https://github.com/x404dev/discord-rankup/issues\n        \n            License : ISC\n        \n            Repository : https://github.com/x404dev/discord-rankup\n        \n            Author : x404dev\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
