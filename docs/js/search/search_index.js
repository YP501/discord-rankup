var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/DiscordRankup.html",[0,1.031,1,0.494]],["body/classes/DiscordRankup.html",[0,0.997,1,0.525,2,0.671,3,0.252,4,0.252,5,0.198,6,0.506,7,1.056,8,1.556,9,1.556,10,1.556,11,0.198,12,0.264,13,2.322,14,4.051,15,2.642,16,1.556,17,1.17,18,3.889,19,1.556,20,1.556,21,1.556,22,2.322,23,1.042,24,1.556,25,0.584,26,1.17,27,1.556,28,1.556,29,0.699,30,1.556,31,1.556,32,0.989,33,0.092,34,3.582,35,0.671,36,0.351,37,1.242,38,0.671,39,2.648,40,1.998,41,1.123,42,0.671,43,4.114,44,1.22,45,0.951,46,1.102,47,2.486,48,1.056,49,0.671,50,1.595,51,1.123,52,2.384,53,0.932,54,0.932,55,0.565,56,0.932,57,3.081,58,3.081,59,1.825,60,1.406,61,0.584,62,1.17,63,1.136,64,1.259,65,1.045,66,1.752,67,1.998,68,2.114,69,0.845,70,0.871,71,2.322,72,2.322,73,3.871,74,2.857,75,2.257,76,2.486,77,0.671,78,0.671,79,1.884,80,1.472,81,1.556,82,2.114,83,2.498,84,0.671,85,0.671,86,1.174,87,0.883,88,1.17,89,0.671,90,1.556,91,0.671,92,0.671,93,0.536,94,0.883,95,0.671,96,1.186,97,0.478,98,0.671,99,0.994,100,0.671,101,0.671,102,1.17,103,1.17,104,1.17,105,0.671,106,2.114,107,0.671,108,1.556,109,0.671,110,1.556,111,0.734,112,2.648,113,0.671,114,0.671,115,0.671,116,2.498,117,1.17,118,0.671,119,0.699,120,1.17,121,0.671,122,0.671,123,1.556,124,2.648,125,0.671,126,0.671,127,2.114,128,0.699,129,0.883,130,0.671,131,0.264,132,1.17,133,0.439,134,3.832,135,3.16,136,0.671,137,0.671,138,0.953,139,3.296,140,0.671,141,0.671,142,0.671,143,0.506,144,0.699,145,2.438,146,2.114,147,0.506,148,2.498,149,1.864,150,0.671,151,1.17,152,0.671,153,2.778,154,1.17,155,1.17,156,1.17,157,1.17,158,1.556,159,1.17,160,2.322,161,0.671,162,2.322,163,1.556,164,1.556,165,0.671,166,0.671,167,0.671,168,0.671,169,0.671,170,0.671,171,1.864,172,0.671,173,0.671,174,1.556,175,1.595,176,0.439,177,1.556,178,0.671,179,0.439,180,0.439,181,1.556,182,1.556,183,0.671,184,0.252,185,0.671,186,0.671,187,0.252,188,0.671,189,0.671,190,0.252,191,0.671,192,0.671,193,0.671,194,0.671,195,0.671,196,0.671,197,0.671,198,0.671,199,0.671,200,0.671,201,0.671,202,0.671,203,0.671,204,0.671,205,0.671,206,0.671,207,0.671,208,0.024,209,0.024]],["title/interfaces/LeaderboardQuery.html",[97,0.494,210,0.14]],["body/interfaces/LeaderboardQuery.html",[1,0.649,3,0.784,4,0.784,5,0.616,7,1.09,11,0.616,12,0.649,23,1.077,25,1.077,29,0.784,32,1.04,33,0.092,36,0.347,37,1.174,41,1.09,44,0.616,45,0.863,46,1.236,48,0.616,51,1.192,53,0.616,54,0.616,55,0.473,56,1.04,59,2.36,61,1.077,62,0.616,63,0.846,64,0.784,65,1.192,69,0.884,70,1.077,80,1.229,93,0.543,96,1.229,97,0.741,99,1.467,119,0.784,128,0.784,131,0.649,133,1.323,138,0.846,144,1.077,176,0.784,179,0.784,180,0.784,184,1.323,187,1.433,190,1.229,208,0.059,209,0.059,210,0.256,211,0.784,212,0.784,213,1.801,214,1.664,215,1.801,216,1.664,217,1.664,218,0.986,219,0.986,220,0.986,221,0.986,222,1.354,223,0.986,224,0.986,225,0.986,226,0.986,227,0.986,228,0.986,229,0.986,230,0.986,231,0.986,232,1.077,233,1.229,234,0.846]],["title/interfaces/RankupEvents.html",[210,0.14,234,0.645]],["body/interfaces/RankupEvents.html",[1,0.762,3,0.829,4,0.829,5,0.651,7,1.111,11,0.651,12,0.673,23,0.829,25,1.118,29,0.829,32,0.651,33,0.092,36,0.366,37,1.064,41,1.064,44,0.651,45,0.877,46,1.205,48,0.651,51,1.218,53,1.064,54,0.878,55,0.673,56,1.111,61,1.118,62,0.651,63,0.878,64,0.829,65,1.17,69,0.897,70,1.118,80,1.265,93,0.559,96,1.118,97,0.673,99,1.354,119,0.829,128,0.829,131,0.673,133,1.354,138,0.878,144,1.118,176,0.829,179,0.829,180,0.829,184,1.118,187,1.118,190,1.118,208,0.061,209,0.061,210,0.259,211,0.829,212,0.829,213,1.405,214,1.042,215,1.405,216,1.405,217,1.405,218,1.042,219,1.042,220,1.042,221,1.042,222,1.405,223,1.042,224,1.042,225,1.042,226,1.042,227,1.042,228,1.042,229,1.042,230,1.042,231,1.042,232,1.265,233,1.414,234,0.994]],["title/interfaces/XPCardData.html",[131,0.494,210,0.14]],["body/interfaces/XPCardData.html",[1,0.641,3,0.771,4,0.771,5,0.606,7,1.083,11,0.606,12,0.641,23,0.771,25,1.218,29,1.314,32,1.083,33,0.092,36,0.341,37,1.032,41,1.032,44,0.606,45,0.921,46,1.267,48,0.606,51,1.24,53,0.606,54,0.606,55,0.464,56,1.148,61,1.218,62,0.606,63,0.836,64,0.771,65,1.214,69,0.951,70,1.218,80,1.218,93,0.539,96,1.064,97,0.641,99,1.314,119,1.064,128,0.771,131,0.734,133,1.314,138,0.957,144,1.064,176,1.314,179,1.314,180,1.314,184,1.064,187,1.064,190,1.064,208,0.058,209,0.058,210,0.255,211,0.771,212,0.771,213,1.338,214,0.969,215,1.338,216,1.338,217,1.338,218,0.969,219,0.969,220,1.338,221,0.969,222,1.652,223,0.969,224,0.969,225,0.969,226,0.969,227,1.338,228,1.338,229,0.969,230,1.338,231,0.969,232,1.064,233,1.218,234,0.836]],["title/interfaces/XPMember.html",[93,0.363,210,0.14]],["body/interfaces/XPMember.html",[1,0.658,3,0.801,4,0.801,5,0.629,7,1.098,11,0.629,12,0.658,23,0.801,25,1.092,29,0.801,32,1.049,33,0.092,36,0.354,37,1.18,41,1.098,44,1.049,45,0.928,46,1.24,48,0.629,51,1.231,53,0.629,54,0.629,55,0.482,56,1.049,61,1.092,62,1.049,63,1.049,64,1.092,65,1.18,69,0.937,70,1.092,80,1.335,93,0.59,96,1.092,97,0.658,99,1.335,119,0.801,128,0.801,131,0.658,133,1.335,138,0.858,144,1.243,176,0.801,179,0.801,180,0.801,184,1.092,187,1.092,190,1.092,208,0.06,209,0.06,210,0.257,211,0.801,212,0.801,213,1.373,214,1.007,215,1.373,216,1.373,217,1.373,218,1.007,219,1.007,220,1.007,221,1.007,222,1.373,223,1.007,224,1.007,225,1.007,226,1.007,227,1.007,228,1.007,229,1.007,230,1.007,231,1.007,232,1.092,233,1.243,234,0.858]],["title/coverage.html",[235,2.232]],["body/coverage.html",[0,1.496,1,0.717,5,0.935,6,2.392,32,0.935,33,0.088,75,2.392,93,0.526,97,0.717,131,0.717,208,0.077,209,0.077,210,0.264,212,1.545,234,0.935,235,2.392,236,2.392,237,3.171,238,3.171,239,4.203,240,3.171,241,3.746,242,3.171,243,3.171,244,3.171,245,3.171]],["title/dependencies.html",[111,0.867,246,1.979]],["body/dependencies.html",[33,0.086,36,0.566,129,2.573,208,0.08,209,0.08,246,2.573,247,3.411,248,3.411]],["title/index.html",[11,0.542,249,1.839,250,1.839]],["body/index.html",[15,1.838,33,0.084,36,0.404,37,0.938,40,1.838,41,1.044,44,1.147,45,0.902,46,0.938,47,2.83,48,1.106,50,2.83,51,1.199,52,1.838,53,0.718,54,0.938,55,0.719,56,0.938,59,1.884,60,1.838,62,0.938,63,0.938,65,0.718,66,2.399,67,1.838,69,0.551,74,1.838,76,2.67,79,2.399,86,1.838,87,1.838,93,0.527,94,1.838,111,1.5,138,1.044,143,1.838,145,1.838,147,1.838,208,0.065,209,0.065,210,0.156,232,1.193,233,1.193,236,1.838,251,3.067,252,3.144,253,2.437,254,2.399,255,2.437,256,2.437,257,3.18,258,3.752,259,2.437,260,3.54,261,2.437,262,2.437,263,2.437,264,2.437,265,2.437,266,2.437,267,2.437,268,2.437,269,2.437,270,2.437,271,2.437,272,2.437,273,2.437,274,2.437,275,2.437,276,2.437,277,2.437,278,2.437,279,2.437,280,2.437,281,2.437,282,2.437,283,2.437,284,2.437,285,2.437,286,2.437,287,2.437,288,2.437,289,2.437,290,2.437,291,3.752,292,2.437,293,2.437,294,2.437,295,2.437,296,2.437,297,3.54,298,2.437,299,2.437,300,2.437,301,2.437,302,2.437,303,2.437,304,2.437,305,2.437,306,2.437,307,2.437,308,2.437,309,2.437]],["title/modules.html",[310,2.232]],["body/modules.html",[33,0.081,208,0.081,209,0.081,310,2.61]],["title/overview.html",[311,2.232]],["body/overview.html",[0,1.616,33,0.08,175,2.585,208,0.08,209,0.08,211,1.286,311,2.585,312,3.427]],["title/properties.html",[12,0.593,111,0.867]],["body/properties.html",[7,0.941,12,0.721,33,0.09,36,0.624,45,0.85,55,0.721,69,0.721,208,0.077,209,0.077,251,2.408,252,2.408,254,2.408,313,3.192,314,3.192,315,3.192,316,3.192,317,3.192,318,3.192,319,3.192,320,3.192,321,3.192,322,3.76,323,3.192,324,3.192,325,3.192,326,3.192,327,3.192,328,3.192]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":124,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["0.1",{"_index":169,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["0.9.4",{"_index":314,"title":{},"body":{"properties.html":{}}}],["1",{"_index":175,"title":{},"body":{"classes/DiscordRankup.html":{},"overview.html":{}}}],["10",{"_index":196,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["100",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["14.8.0",{"_index":247,"title":{},"body":{"dependencies.html":{}}}],["16/16",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":170,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["2/2",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":312,"title":{},"body":{"overview.html":{}}}],["475",{"_index":226,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["5",{"_index":224,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["5/5",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":231,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["550",{"_index":223,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["6/6",{"_index":243,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":221,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["7.0.1",{"_index":248,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":229,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["a.xp",{"_index":207,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["acts",{"_index":9,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["add",{"_index":50,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["added",{"_index":266,"title":{},"body":{"index.html":{}}}],["addxp",{"_index":19,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["addxp(userid",{"_index":42,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["affecting",{"_index":71,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["allows",{"_index":253,"title":{},"body":{"index.html":{}}}],["already",{"_index":302,"title":{},"body":{"index.html":{}}}],["amount",{"_index":65,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["async",{"_index":18,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["author",{"_index":327,"title":{},"body":{"properties.html":{}}}],["await",{"_index":139,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["b",{"_index":205,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["b.xp",{"_index":206,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["baseinteraction",{"_index":218,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["basic",{"_index":279,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":151,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["bot",{"_index":255,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":321,"title":{},"body":{"properties.html":{}}}],["built",{"_index":270,"title":{},"body":{"index.html":{}}}],["called",{"_index":72,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["card",{"_index":102,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["cause",{"_index":48,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["cause)xp.fetchxp(userid",{"_index":296,"title":{},"body":{"index.html":{}}}],["cause)xp.setxp(userid",{"_index":295,"title":{},"body":{"index.html":{}}}],["check",{"_index":142,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["class",{"_index":0,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["client",{"_index":15,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["client);once",{"_index":286,"title":{},"body":{"index.html":{}}}],["client.on('levelup",{"_index":307,"title":{},"body":{"index.html":{}}}],["come",{"_index":306,"title":{},"body":{"index.html":{}}}],["connect",{"_index":112,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["const",{"_index":145,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["continue",{"_index":157,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["coverage",{"_index":235,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":79,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["createmember",{"_index":20,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["createmember(userid",{"_index":77,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["current",{"_index":222,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["currentxp",{"_index":176,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["customizable",{"_index":268,"title":{},"body":{"index.html":{}}}],["data",{"_index":103,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["database",{"_index":41,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["default",{"_index":60,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["defined",{"_index":34,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["delete",{"_index":86,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deleted",{"_index":87,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deletemember",{"_index":21,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["deletemember(userid",{"_index":84,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["dependencies",{"_index":246,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["development",{"_index":265,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":22,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["disconnects",{"_index":90,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["discord",{"_index":251,"title":{},"body":{"index.html":{},"properties.html":{}}}],["discord.js",{"_index":36,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["discordrankup",{"_index":1,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["documentation",{"_index":236,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":154,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["don't",{"_index":81,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["done",{"_index":287,"title":{},"body":{"index.html":{}}}],["early",{"_index":264,"title":{},"body":{"index.html":{}}}],["easy",{"_index":257,"title":{},"body":{"index.html":{}}}],["emit",{"_index":52,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitevent",{"_index":47,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitted",{"_index":233,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["error(\"couldn't",{"_index":173,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["event",{"_index":54,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["events",{"_index":232,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["exclude",{"_index":187,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["exec",{"_index":198,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exist",{"_index":82,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exists",{"_index":143,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["export",{"_index":133,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["false",{"_index":147,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["features",{"_index":260,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":23,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["fetch(userid",{"_index":91,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetchleaderboard",{"_index":24,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetchleaderboard(guildid",{"_index":95,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["few",{"_index":304,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["find(query",{"_index":193,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["first",{"_index":281,"title":{},"body":{"index.html":{}}}],["following",{"_index":299,"title":{},"body":{"index.html":{}}}],["function",{"_index":70,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["gain",{"_index":293,"title":{},"body":{"index.html":{}}}],["gained",{"_index":227,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["getcarddata",{"_index":25,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["getcarddata(userid",{"_index":100,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getlevelfromxp",{"_index":26,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getlevelfromxp(xp",{"_index":104,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getting",{"_index":249,"title":{"index.html":{}},"body":{}}],["guild",{"_index":64,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["guild's",{"_index":292,"title":{},"body":{"index.html":{}}}],["guildid",{"_index":44,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["guildid)this",{"_index":297,"title":{},"body":{"index.html":{}}}],["here",{"_index":278,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":318,"title":{},"body":{"properties.html":{}}}],["https://discord",{"_index":319,"title":{},"body":{"properties.html":{}}}],["https://github.com/x404dev/discord",{"_index":322,"title":{},"body":{"properties.html":{}}}],["id",{"_index":63,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["identifier",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":188,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["import",{"_index":128,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["include",{"_index":213,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["init",{"_index":27,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["init(url",{"_index":107,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initialize",{"_index":110,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initiate",{"_index":283,"title":{},"body":{"index.html":{}}}],["install",{"_index":273,"title":{},"body":{"index.html":{}}}],["installation",{"_index":271,"title":{},"body":{"index.html":{}}}],["interface",{"_index":210,"title":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":211,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"overview.html":{}}}],["isc",{"_index":325,"title":{},"body":{"properties.html":{}}}],["keywords",{"_index":316,"title":{},"body":{"properties.html":{}}}],["last",{"_index":228,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["leaderboard",{"_index":99,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["leaderboard.includes(member",{"_index":202,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboard.push(member",{"_index":203,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboard.sort((a",{"_index":204,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboardquery",{"_index":97,"title":{"interfaces/LeaderboardQuery.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["less",{"_index":165,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["level",{"_index":69,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levels",{"_index":55,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levelup",{"_index":53,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["license",{"_index":324,"title":{},"body":{"properties.html":{}}}],["lightweight",{"_index":267,"title":{},"body":{"index.html":{}}}],["limit",{"_index":214,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["limit(options?.limit",{"_index":195,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["list",{"_index":216,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["make",{"_index":261,"title":{},"body":{"index.html":{}}}],["manager",{"_index":10,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["managing",{"_index":289,"title":{},"body":{"index.html":{}}}],["many",{"_index":259,"title":{},"body":{"index.html":{}}}],["matching",{"_index":209,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(0.1",{"_index":167,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["math.sqrt(xp",{"_index":168,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member",{"_index":80,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["member's",{"_index":83,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member.level",{"_index":183,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member.xp",{"_index":182,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membercard",{"_index":171,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["members",{"_index":184,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["membertoupdate",{"_index":153,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.level",{"_index":162,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.save",{"_index":164,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.xp",{"_index":160,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["message",{"_index":219,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["method",{"_index":300,"title":{},"body":{"index.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["missingxp",{"_index":180,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["model",{"_index":144,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["models/xpmember",{"_index":130,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["modules",{"_index":310,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongodb",{"_index":40,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["mongoose",{"_index":129,"title":{},"body":{"classes/DiscordRankup.html":{},"dependencies.html":{}}}],["mongoose.connect(url",{"_index":140,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.connectoptions",{"_index":108,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.disconnect",{"_index":141,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongourl",{"_index":16,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["more",{"_index":305,"title":{},"body":{"index.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["need",{"_index":282,"title":{},"body":{"index.html":{}}}],["needs",{"_index":230,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["new",{"_index":75,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["newmember",{"_index":148,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.level",{"_index":178,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.save",{"_index":150,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.xp",{"_index":177,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["nin",{"_index":191,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["note",{"_index":263,"title":{},"body":{"index.html":{}}}],["npm",{"_index":272,"title":{},"body":{"index.html":{}}}],["number",{"_index":46,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["object",{"_index":94,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"index.html":{}}}],["options",{"_index":96,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["options.exclude",{"_index":189,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options.include.foreach(async",{"_index":200,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options?.exclude",{"_index":192,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options?.include",{"_index":199,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["overview",{"_index":311,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":111,"title":{"dependencies.html":{},"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["param",{"_index":134,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["pnpm",{"_index":275,"title":{},"body":{"index.html":{}}}],["private",{"_index":13,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["progressxp",{"_index":179,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["promise",{"_index":74,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["public",{"_index":135,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["query",{"_index":190,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["range",{"_index":186,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["ranks",{"_index":317,"title":{},"body":{"properties.html":{}}}],["rankup",{"_index":252,"title":{},"body":{"index.html":{},"properties.html":{}}}],["rankup.js.org",{"_index":320,"title":{},"body":{"properties.html":{}}}],["rankup/issues",{"_index":323,"title":{},"body":{"properties.html":{}}}],["rankupdocumentation",{"_index":276,"title":{},"body":{"index.html":{}}}],["rankupevents",{"_index":234,"title":{"interfaces/RankupEvents.html":{}},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["reach",{"_index":120,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["remove",{"_index":116,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp",{"_index":28,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp(userid",{"_index":114,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["repository",{"_index":326,"title":{},"body":{"properties.html":{}}}],["require('discord",{"_index":284,"title":{},"body":{"index.html":{}}}],["required",{"_index":119,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["requiredxp",{"_index":29,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["requiredxp(level",{"_index":117,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["reset",{"_index":123,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp",{"_index":30,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp(userid",{"_index":121,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resolve",{"_index":156,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["results",{"_index":208,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":138,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["returns",{"_index":73,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["save",{"_index":149,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["set",{"_index":127,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp",{"_index":31,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp(userid",{"_index":125,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["simple",{"_index":315,"title":{},"body":{"properties.html":{}}}],["skip",{"_index":215,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["skip(options?.skip",{"_index":197,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["snowflake",{"_index":43,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["something",{"_index":308,"title":{},"body":{"index.html":{}}}],["sort",{"_index":194,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["specified",{"_index":106,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts",{"_index":6,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["src/index.ts:102",{"_index":49,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:142",{"_index":115,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:16",{"_index":38,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:181",{"_index":126,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:21",{"_index":35,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:219",{"_index":122,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:232",{"_index":105,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:241",{"_index":118,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:248",{"_index":101,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:285",{"_index":92,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:30",{"_index":109,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:300",{"_index":98,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:46",{"_index":89,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:57",{"_index":78,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:81",{"_index":85,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/types/types.ts",{"_index":212,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["start",{"_index":288,"title":{},"body":{"index.html":{}}}],["started",{"_index":250,"title":{"index.html":{}},"body":{}}],["starts",{"_index":225,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["statements",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["string",{"_index":37,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["successfully",{"_index":88,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["system",{"_index":254,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["this.client",{"_index":137,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.client.emit('levelup",{"_index":163,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.createmember(userid",{"_index":158,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.fetch(id",{"_index":201,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.getlevelfromxp(membertoupdate.xp",{"_index":161,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.mongourl",{"_index":136,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.requiredxp(member.level",{"_index":181,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.requiredxp(newmember.level",{"_index":174,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.setxp(userid",{"_index":166,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["throw",{"_index":172,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["total",{"_index":220,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["true",{"_index":66,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["types",{"_index":309,"title":{},"body":{"index.html":{}}}],["types/types",{"_index":132,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["unique",{"_index":262,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":113,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["up",{"_index":56,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["update",{"_index":159,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["url",{"_index":39,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["usage",{"_index":280,"title":{},"body":{"index.html":{}}}],["use",{"_index":258,"title":{},"body":{"index.html":{}}}],["user",{"_index":51,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["user's",{"_index":76,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["userid",{"_index":62,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["userids",{"_index":217,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["uses",{"_index":269,"title":{},"body":{"index.html":{}}}],["value",{"_index":61,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{}}}],["version",{"_index":313,"title":{},"body":{"properties.html":{}}}],["very",{"_index":256,"title":{},"body":{"index.html":{}}}],["view",{"_index":277,"title":{},"body":{"index.html":{}}}],["wait",{"_index":155,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["want",{"_index":298,"title":{},"body":{"index.html":{}}}],["whether",{"_index":67,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["within",{"_index":185,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["x404dev",{"_index":328,"title":{},"body":{"properties.html":{}}}],["xp",{"_index":45,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["xp.addxp(userid",{"_index":290,"title":{},"body":{"index.html":{}}}],["xp.createmember(userid",{"_index":301,"title":{},"body":{"index.html":{}}}],["xp.deletemember(userid",{"_index":303,"title":{},"body":{"index.html":{}}}],["xp.init(\"mongourl",{"_index":285,"title":{},"body":{"index.html":{}}}],["xp.removexp(userid",{"_index":294,"title":{},"body":{"index.html":{}}}],["xpamount",{"_index":291,"title":{},"body":{"index.html":{}}}],["xpcarddata",{"_index":131,"title":{"interfaces/XPCardData.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["xpmember",{"_index":93,"title":{"interfaces/XPMember.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPCardData.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["xpmember.findone",{"_index":146,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["xpmember.findoneanddelete",{"_index":152,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["yarn",{"_index":274,"title":{},"body":{"index.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/DiscordRankup.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DiscordRankup.html":{"url":"classes/DiscordRankup.html","title":"class - DiscordRankup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordRankup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                The main class for DiscordRankup, acts as a manager.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                client\n                            \n                            \n                                    Private\n                                    Static\n                                mongoURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                addXP\n                            \n                            \n                                    Static\n                                    Async\n                                createMember\n                            \n                            \n                                    Static\n                                    Async\n                                deleteMember\n                            \n                            \n                                    Static\n                                    Async\n                                disconnect\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Static\n                                    Async\n                                fetchLeaderboard\n                            \n                            \n                                    Static\n                                    Async\n                                getCardData\n                            \n                            \n                                    Static\n                                getLevelFromXP\n                            \n                            \n                                    Static\n                                    Async\n                                init\n                            \n                            \n                                    Static\n                                    Async\n                                removeXP\n                            \n                            \n                                    Static\n                                requiredXP\n                            \n                            \n                                    Static\n                                    Async\n                                resetXP\n                            \n                            \n                                    Static\n                                    Async\n                                setXP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:21\n                        \n                    \n\n            \n                \n                    The Discord.js client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        mongoURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:16\n                        \n                    \n\n            \n                \n                    The URL to the MongoDB database\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        addXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    addXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:102\n                \n            \n\n\n            \n                \n                    Add XP to the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to add\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        createMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:57\n                \n            \n\n\n            \n                \n                    Create a member in the database if they don't exist\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        deleteMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:81\n                \n            \n\n\n            \n                \n                    Delete a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Whether the member was deleted successfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:46\n                \n            \n\n\n            \n                \n                    Disconnects from the database\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The promise to disconnect from the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:285\n                \n            \n\n\n            \n                \n                    fetch a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XPMember object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fetchLeaderboard\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLeaderboard(guildID: string | Snowflake, options?: LeaderboardQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:300\n                \n            \n\n\n            \n                \n                    Fetch the leaderboard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                LeaderboardQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the leaderboard\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The leaderboard\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        getCardData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCardData(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:248\n                \n            \n\n\n            \n                \n                    Returns the user's card data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getLevelFromXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLevelFromXP(xp: number)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:232\n                \n            \n\n\n            \n                \n                    Returns a level from a specified XP amount\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XP amount\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The level\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(url: string, client: Client, options?: mongoose.ConnectOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:30\n                \n            \n\n\n            \n                \n                    Initialize the package and connect to the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The URL to the MongoDB database\n\n                                    \n                                \n                                \n                                    client\n                                    \n                                            Client\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Discord.js client\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            mongoose.ConnectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options to connect to the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The promise to connect to the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        removeXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:142\n                \n            \n\n\n            \n                \n                    Remove XP from the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to remove\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        requiredXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    requiredXP(level: number)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:241\n                \n            \n\n\n            \n                \n                    Returns the XP required to reach a specified level\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The XP required\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        resetXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetXP(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:219\n                \n            \n\n\n            \n                \n                    Reset the user's XP to 0\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        setXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:181\n                \n            \n\n\n            \n                \n                    Set the user's XP and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to set\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import mongoose from 'mongoose';\nimport xpmember from './models/xpmember';\nimport { LeaderboardQuery, XPCardData, XPMember } from './types/types';\nimport { Client, Snowflake } from 'discord.js';\n\n/**\n * The main class for DiscordRankup, acts as a manager.\n * @class DiscordRankup\n * @description The main class for DiscordRankup, acts as a manager.\n */\nexport default class DiscordRankup {\n  /**\n   * The URL to the MongoDB database\n   * @type {string}\n   */\n  private static mongoURL: string;\n  /**\n   * The Discord.js client\n   * @type {Client}\n   */\n  private static client: Client;\n  /**\n   * Initialize the package and connect to the database\n   * @param url The URL to the MongoDB database\n   * @param client The Discord.js client\n   * @param options The options to connect to the database\n   * @returns {Promise} The promise to connect to the database\n   * @description Initialize the package and connect to the database\n   */\n  public static async init(\n    url: string,\n    client: Client,\n    options?: mongoose.ConnectOptions,\n  ) {\n    // Connect to the database\n    this.mongoURL = url;\n    this.client = client;\n    return await mongoose.connect(url, options);\n  }\n\n  /**\n   * Disconnects from the database\n   * @returns {Promise} The promise to disconnect from the database\n   * @description Disconnects from the database\n   */\n  public static async disconnect(): Promise {\n    return await mongoose.disconnect();\n  }\n\n  /**\n   * Create a member in the database if they don't exist\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XP\n   * @description Create a member in the database if they don't exist\n   */\n  public static async createMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    // Check if the member exists on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    if (member) return false;\n    // Create a new member on mongoDB with XPMember model\n    const newMember = new xpmember({\n      UserID: userID,\n      GuildID: guildID,\n      XP: 0,\n      Level: 0,\n    });\n    // Save the member to the database\n    return newMember.save();\n  }\n\n  /**\n   * Delete a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {boolean} Whether the member was deleted successfully\n   */\n  public static async deleteMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    //delete the member from the database\n    const member = await xpmember.findOneAndDelete({\n      UserID: userID,\n      GuildID: guildID,\n    });\n    return !!member;\n  }\n\n  /**\n   * Add XP to the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to add\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   */\n  public static async addXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Add xp to the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP\n    memberToUpdate.XP += xp;\n    const level = this.getLevelFromXP(memberToUpdate.XP);\n    // Emit levelUp event if the user levels up\n    if (level > memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Remove XP from the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to remove\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   * @description Remove XP from the user\n   */\n  public static async removeXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Remove xp from the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP, if the user has less XP than the amount to remove, set it to 0\n    memberToUpdate.XP = memberToUpdate.XP - xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Set the user's XP and emit the levelUp event if the user levels up\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @param {number} xp The amount of XP to set\n   * @param {Boolean} emitEvent Whether to emit the levelUp event\n   * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns {number} The new amount of user's XP\n   */\n  public static async setXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    if (xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Reset the user's XP to 0\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {number} The new amount of user's XP\n   * @description Reset the user's XP to 0\n   */\n  public static async resetXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    return this.setXP(userID, guildID, 0);\n  }\n\n  /**\n   * Returns a level from a specified XP amount\n   * @param {number} xp The XP amount\n   * @returns {number} The level\n   * @description Returns a level from a specified XP amount\n   */\n  public static getLevelFromXP(xp: number): number {\n    return Math.floor(0.1 * Math.sqrt(xp));\n  }\n\n  /**\n   * Returns the XP required to reach a specified level\n   * @param {number} level The level\n   * @returns {number} The XP required\n   */\n  public static requiredXP(level: number): number {\n    return ((level / 0.1) ** 2)\n  }\n\n  /**\n   * Returns the user's card data\n   */\n  public static async getCardData(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n\n    let memberCard: XPCardData;\n\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      if (!newMember) throw new Error(\"Couldn't create member!\");\n      memberCard = {\n        requiredXP: this.requiredXP(newMember.Level + 1),\n        currentXP: newMember.XP,\n        level: newMember.Level,\n        progressXP: newMember.XP - this.requiredXP(newMember.Level),\n        missingXP: this.requiredXP(newMember.Level + 1) - newMember.XP,\n      };\n    } else {\n      memberCard = {\n        requiredXP: this.requiredXP(member.Level + 1),\n        currentXP: member.XP,\n        level: member.Level,\n        progressXP: member.XP - this.requiredXP(member.Level),\n        missingXP: this.requiredXP(member.Level + 1) - member.XP,\n      };\n    }\n    return memberCard;\n  }\n\n  /**\n   * fetch a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XPMember object\n   * @description Get the member's XP\n   */\n  public static async fetch(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    const member = xpmember.findOne({ UserID: userID, GuildID: guildID });\n    return member;\n  }\n\n  /**\n   * Fetch the leaderboard\n   * @param {string} guildID The ID of the guild\n   * @param {LeaderboardQuery} options The options for the leaderboard\n   * @returns {XPMember[]} The leaderboard\n   * @description Fetch the leaderboard\n   */\n  public static async fetchLeaderboard(\n    guildID: string | Snowflake,\n    options?: LeaderboardQuery,\n  ): Promise {\n    // Fetch the members with the most xp within range and exclude the ids from options.exclude\n\n    const query = {\n      GuildID: guildID,\n      UserID: { $nin: options?.exclude || [] },\n    };\n\n    const leaderboard: XPMember[] = await xpmember\n      .find(query)\n      .sort({ XP: -1 })\n      .limit(options?.limit || 10)\n      .skip(options?.skip || 0)\n      .exec();\n\n    if (options?.include) {\n      options.include.forEach(async (id) => {\n        const member = await this.fetch(id, guildID);\n        if (member && !leaderboard.includes(member)) leaderboard.push(member);\n      });\n    }\n\n    return leaderboard.sort((a, b) => b.XP - a.XP);\n  }\n}\n\nexport * from './types/types';\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeaderboardQuery.html":{"url":"interfaces/LeaderboardQuery.html","title":"interface - LeaderboardQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeaderboardQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The options for a leaderboard query to the database\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exclude\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exclude\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exclude:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    list of userIDs to exclude from the leaderboard if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    list of userIDs to include in the leaderboard if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The amount of members to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skip:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The amount of members to skip\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */\nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The return value of the getCardData function\n * @interface XPCardData\n * @description The return value of the getCardData function\n */\nexport interface XPCardData {\n  /** the total amount of xp required for the user to level up */\n  requiredXP: number; //600\n  /** the current amount of xp the user has */\n  currentXP: number; // 550\n  /** the current level of the user */\n  level: number; // 5 starts at 475\n  /** The amount of XP the user gained since his last level up */\n  progressXP: number; // 75\n  /** The amount of XP the user needs to level up */\n  missingXP: number; // 50\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RankupEvents.html":{"url":"interfaces/RankupEvents.html","title":"interface - RankupEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RankupEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The events emitted by DiscordRankup\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            levelUp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        levelUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event emitted when a user levels up\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */\nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The return value of the getCardData function\n * @interface XPCardData\n * @description The return value of the getCardData function\n */\nexport interface XPCardData {\n  /** the total amount of xp required for the user to level up */\n  requiredXP: number; //600\n  /** the current amount of xp the user has */\n  currentXP: number; // 550\n  /** the current level of the user */\n  level: number; // 5 starts at 475\n  /** The amount of XP the user gained since his last level up */\n  progressXP: number; // 75\n  /** The amount of XP the user needs to level up */\n  missingXP: number; // 50\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/XPCardData.html":{"url":"interfaces/XPCardData.html","title":"interface - XPCardData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  XPCardData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The return value of the getCardData function\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentXP\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            missingXP\n                                        \n                                \n                                \n                                        \n                                            progressXP\n                                        \n                                \n                                \n                                        \n                                            requiredXP\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentXP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentXP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the current amount of xp the user has\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the current level of the user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        missingXP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        missingXP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The amount of XP the user needs to level up\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progressXP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        progressXP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The amount of XP the user gained since his last level up\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requiredXP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requiredXP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the total amount of xp required for the user to level up\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */\nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The return value of the getCardData function\n * @interface XPCardData\n * @description The return value of the getCardData function\n */\nexport interface XPCardData {\n  /** the total amount of xp required for the user to level up */\n  requiredXP: number; //600\n  /** the current amount of xp the user has */\n  currentXP: number; // 550\n  /** the current level of the user */\n  level: number; // 5 starts at 475\n  /** The amount of XP the user gained since his last level up */\n  progressXP: number; // 75\n  /** The amount of XP the user needs to level up */\n  missingXP: number; // 50\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/XPMember.html":{"url":"interfaces/XPMember.html","title":"interface - XPMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  XPMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The model of a member in the database\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            GuildID\n                                        \n                                \n                                \n                                        \n                                            Level\n                                        \n                                \n                                \n                                        \n                                            UserID\n                                        \n                                \n                                \n                                        \n                                            XP\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        GuildID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        GuildID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the Guild\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The level of the user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        UserID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        UserID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the User\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        XP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        XP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The amount of XP the user has\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */\nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The return value of the getCardData function\n * @interface XPCardData\n * @description The return value of the getCardData function\n */\nexport interface XPCardData {\n  /** the total amount of xp required for the user to level up */\n  requiredXP: number; //600\n  /** the current amount of xp the user has */\n  currentXP: number; // 550\n  /** the current level of the user */\n  level: number; // 5 starts at 475\n  /** The amount of XP the user gained since his last level up */\n  progressXP: number; // 75\n  /** The amount of XP the user needs to level up */\n  missingXP: number; // 50\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/index.ts\n            \n            class\n            DiscordRankup\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            LeaderboardQuery\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            RankupEvents\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            XPCardData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            XPMember\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            discord.js : ^14.8.0\n        \n            mongoose : ^7.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDiscord-RankUP\nDiscord-RankUP is a package that allows you to create a rankup system for your discord bot.\nIt is very easy to use and has a many features to make your rankup system unique!\nNote: This package is in early development, not all features have been added yet!\nFeatures\n\nLightweight\nEasy to use\nCustomizable\nUses MongoDB\nBuilt for Discord.Js\n\nInstallation\nnpm install discord-rankup\nyarn add discord-rankup\npnpm add discord-rankupDocumentation\nView the documentation here\nBasic Usage\nFirst you need to initiate the Rankup Client.\nconst xp = require('discord-rankup');\n\nxp.init(\"MONGOURL\", client);Once that is done, you can start managing the user's XP.\nxp.addXP(userID, guildID, xpAmount, emitEvent, cause)\nuserID: The user's ID\nguildID: The guild's ID\nxpAmount: The amount of XP to add\nemitEvent (optional, true by default): Whether or not to emit the event if the user levels up\ncause (optional): The cause of the XP gain, can be any object, it will be emitted in the event\n\nxp.removeXP(userID, guildID, xpAmount, emitEvent, cause)xp.setXP(userID, guildID, xpAmount, emitEvent, cause)xp.fetchXP(userID, guildID)This will return a promise with the user's XP.\nIf you want to add the user to the database, you can use the following method.\nxp.createMember(userID, guildID)This will create a user in the database, if the user already exists, it will return false.\nxp.deleteMember(userID, guildID)This will delete the user from the database, if the user was deleted, it will return true.\nEvents\nDiscord-RankUP has a few events that you can use.\n\nlevelUp: Emitted when a user levels up\n(More to come)\n\nclient.on('levelUp', (XPMember, cause) => {\n    // Do something\n})Types\ninterface XPMember {\n    userID: string;\n    guildID: string;\n    xp: number;\n    level: number;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.9.4\n        \n            Description : A simple discord.js xp and level system\n        \n            Keywords : discord, discord.js, ranks, levels, xp\n        \n            Homepage : https://discord-rankup.js.org/\n        \n            Bugs : https://github.com/x404dev/discord-rankup/issues\n        \n            License : ISC\n        \n            Repository : https://github.com/x404dev/discord-rankup\n        \n            Author : x404dev\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
