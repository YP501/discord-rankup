var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/DiscordRankup.html",[0,0.944,1,0.556]],["body/classes/DiscordRankup.html",[0,0.893,1,0.578,2,0.626,3,0.281,4,0.281,5,0.218,6,0.465,7,1.173,8,1.46,9,1.46,10,1.46,11,0.218,12,0.289,13,2.19,14,3.798,15,2.477,16,1.46,17,1.095,18,3.652,19,1.46,20,1.46,21,1.46,22,2.19,23,1.179,24,1.46,25,1.095,26,1.46,27,1.46,28,1.46,29,1.46,30,1.067,31,0.1,32,3.33,33,0.626,34,0.383,35,1.39,36,0.626,37,2.503,38,1.862,39,1.263,40,0.626,41,3.877,42,1.358,43,1.057,44,1.159,45,2.327,46,1.186,47,0.626,48,1.481,49,1.263,50,2.229,51,1.043,52,1.043,53,0.623,54,1.043,55,2.738,56,2.738,57,1.574,58,1.303,59,1.46,60,1.296,61,1.277,62,1.43,63,1.173,64,1.629,65,1.862,66,1.991,67,0.855,68,2.19,69,2.19,70,2.19,71,3.534,72,2.607,73,2.036,74,2.229,75,0.626,76,0.626,77,1.629,78,1.656,79,1.46,80,1.991,81,2.359,82,0.626,83,0.626,84,1.086,85,0.814,86,1.095,87,0.626,88,1.46,89,1.095,90,0.626,91,0.626,92,0.59,93,0.814,94,0.626,95,1.345,96,0.526,97,0.626,98,1.123,99,1.095,100,0.626,101,1.46,102,0.626,103,1.46,104,0.626,105,1.46,106,0.655,107,2.503,108,0.626,109,0.626,110,2.359,111,0.626,112,0.626,113,1.46,114,2.503,115,0.626,116,0.626,117,1.991,118,0.786,119,0.814,120,0.626,121,1.095,122,0.491,123,3.631,124,2.835,125,0.626,126,0.626,127,2.172,128,2.998,129,0.626,130,0.626,131,0.626,132,0.465,133,0.786,134,2.172,135,1.752,136,0.465,137,1.991,138,1.752,139,0.626,140,1.095,141,0.626,142,2.629,143,1.095,144,1.095,145,1.095,146,1.095,147,1.095,148,1.095,149,2.19,150,0.626,151,2.19,152,1.46,153,1.46,154,0.626,155,0.626,156,0.626,157,0.626,158,0.281,159,0.626,160,0.626,161,0.281,162,0.626,163,0.626,164,0.281,165,0.626,166,0.626,167,0.626,168,0.626,169,0.465,170,0.626,171,0.626,172,0.626,173,0.626,174,0.626,175,0.626,176,0.626,177,0.626,178,0.626,179,0.626,180,0.626,181,0.626,182,0.626,183,0.026,184,0.026]],["title/interfaces/LeaderboardQuery.html",[96,0.556,185,0.272]],["body/interfaces/LeaderboardQuery.html",[1,0.751,3,0.945,4,0.945,5,0.733,7,1.2,11,0.733,12,0.751,23,1.276,30,1.2,31,0.1,34,0.405,35,1.343,39,1.254,42,0.733,43,0.751,44,1.343,46,0.99,49,1.254,51,0.733,52,0.99,53,0.556,54,0.99,57,2.219,60,0.733,61,0.99,62,0.945,63,1.254,67,0.751,78,1.548,92,0.663,95,1.445,96,0.851,98,1.703,118,0.945,122,1.445,133,1.276,158,1.548,161,1.666,164,1.445,183,0.066,184,0.066,185,0.481,186,0.945,187,0.945,188,2.134,189,1.983,190,2.134,191,1.983,192,1.983,193,1.21,194,1.21,195,1.276,196,1.548,197,0.99,198,0.945,199,0.733]],["title/interfaces/RankupEvents.html",[185,0.272,197,0.732]],["body/interfaces/RankupEvents.html",[1,0.869,3,0.985,4,0.985,5,0.764,7,1.221,11,0.764,12,0.772,23,0.985,30,1.018,31,0.101,34,0.422,35,1.221,39,1.221,42,0.764,43,0.772,44,1.221,46,1.018,49,1.335,51,1.221,52,1.221,53,0.772,54,1.221,60,0.764,61,1.018,62,0.985,63,1.145,67,0.772,78,1.574,92,0.674,95,1.312,96,0.772,98,1.574,118,0.985,122,1.476,133,1.312,158,1.312,161,1.312,164,1.312,183,0.068,184,0.068,185,0.486,186,0.985,187,0.985,188,1.681,189,1.262,190,1.681,191,1.681,192,1.681,193,1.262,194,1.262,195,1.476,196,1.721,197,1.145,198,1.312,199,1.221]],["title/interfaces/XPMember.html",[92,0.405,185,0.272]],["body/interfaces/XPMember.html",[1,0.764,3,0.969,4,0.969,5,0.751,7,1.213,11,0.751,12,0.764,23,0.969,30,1.213,31,0.1,34,0.415,35,1.351,39,1.264,42,1.213,43,0.988,44,1.351,46,1.007,49,1.351,51,0.751,52,1.007,53,0.57,54,1.007,60,1.213,61,1.213,62,1.298,63,1.213,67,0.988,78,1.631,92,0.699,95,1.298,96,0.764,98,1.564,118,0.969,122,1.464,133,1.464,158,1.298,161,1.298,164,1.298,183,0.068,184,0.068,185,0.484,186,0.969,187,0.969,188,1.663,189,1.241,190,1.663,191,1.663,192,1.663,193,1.241,194,1.241,195,1.298,196,1.564,197,1.007,198,0.969,199,0.751]],["title/coverage.html",[200,2.115]],["body/coverage.html",[0,1.362,1,0.802,5,1.056,6,2.258,30,1.056,31,0.095,73,2.258,92,0.584,96,0.802,183,0.084,184,0.084,185,0.494,187,1.713,197,1.056,200,2.258,201,2.258,202,3.036,203,3.036,204,3.946,205,3.036,206,3.587,207,3.036,208,3.036,209,3.036]],["title/dependencies.html",[106,0.795,210,1.877]],["body/dependencies.html",[31,0.094,34,0.625,119,2.418,183,0.087,184,0.087,210,2.418,211,3.252,212,3.252]],["title/index.html",[11,0.616,213,1.772,214,1.772]],["body/index.html",[15,1.654,31,0.091,34,0.427,35,1.027,38,1.654,39,1.152,42,1.277,43,0.996,44,1.027,45,2.623,46,1.227,48,2.623,49,1.339,50,1.654,51,0.774,52,1.027,53,0.779,54,1.027,57,1.696,58,1.654,60,1.027,61,1.027,63,0.774,64,2.194,65,1.654,67,0.587,72,1.654,74,2.462,77,2.194,84,1.654,85,1.654,92,0.567,93,1.654,106,1.324,127,2.462,132,1.654,134,1.654,136,1.654,183,0.069,184,0.069,185,0.288,195,1.324,196,1.324,199,1.376,201,1.654,215,2.862,216,2.224,217,2.194,218,2.224,219,2.224,220,2.951,221,3.527,222,2.224,223,3.311,224,2.224,225,2.224,226,2.224,227,2.224,228,2.224,229,2.224,230,2.224,231,2.224,232,2.224,233,2.224,234,2.224,235,2.224,236,2.224,237,2.224,238,2.224,239,2.224,240,2.224,241,2.224,242,2.224,243,2.224,244,2.224,245,2.224,246,2.224,247,2.224,248,2.224,249,2.224,250,2.224,251,2.224,252,2.224,253,2.224,254,3.527,255,2.224,256,2.224,257,2.224,258,2.224,259,2.224,260,3.311,261,2.224,262,2.224,263,2.224,264,2.224,265,2.224,266,2.224,267,2.224,268,2.224,269,2.224,270,2.224,271,2.224,272,2.224]],["title/modules.html",[273,2.115]],["body/modules.html",[31,0.088,183,0.088,184,0.088,273,2.459]],["title/overview.html",[274,2.115]],["body/overview.html",[0,1.467,31,0.087,169,2.431,183,0.087,184,0.087,186,1.467,274,2.431,275,3.27]],["title/properties.html",[12,0.666,106,0.795]],["body/properties.html",[7,1.048,12,0.796,31,0.098,34,0.686,43,0.943,53,0.796,67,0.796,183,0.083,184,0.083,198,1.352,199,1.048,215,2.24,217,2.24,276,3.013,277,3.013,278,3.013,279,3.013,280,3.013,281,3.013,282,3.013,283,3.013,284,3.571,285,3.013,286,3.013,287,3.013,288,3.013,289,3.013,290,3.013]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":114,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["0.9.3",{"_index":277,"title":{},"body":{"properties.html":{}}}],["1",{"_index":169,"title":{},"body":{"classes/DiscordRankup.html":{},"overview.html":{}}}],["10",{"_index":171,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["100",{"_index":204,"title":{},"body":{"coverage.html":{}}}],["14.8.0",{"_index":211,"title":{},"body":{"dependencies.html":{}}}],["14/14",{"_index":205,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":275,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":207,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":206,"title":{},"body":{"coverage.html":{}}}],["7.0.1",{"_index":212,"title":{},"body":{"dependencies.html":{}}}],["a.xp",{"_index":182,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["acts",{"_index":9,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["add",{"_index":48,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["added",{"_index":229,"title":{},"body":{"index.html":{}}}],["addxp",{"_index":19,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["addxp(userid",{"_index":40,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["affecting",{"_index":69,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["allows",{"_index":216,"title":{},"body":{"index.html":{}}}],["already",{"_index":265,"title":{},"body":{"index.html":{}}}],["amount",{"_index":63,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["async",{"_index":18,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["author",{"_index":289,"title":{},"body":{"properties.html":{}}}],["await",{"_index":128,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["b",{"_index":180,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["b.xp",{"_index":181,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["baseinteraction",{"_index":193,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["basic",{"_index":242,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":140,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["bot",{"_index":218,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":283,"title":{},"body":{"properties.html":{}}}],["built",{"_index":233,"title":{},"body":{"index.html":{}}}],["called",{"_index":70,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["cause",{"_index":46,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["cause)xp.fetchxp(userid",{"_index":259,"title":{},"body":{"index.html":{}}}],["cause)xp.setxp(userid",{"_index":258,"title":{},"body":{"index.html":{}}}],["check",{"_index":131,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["class",{"_index":0,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["client",{"_index":15,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["client);once",{"_index":249,"title":{},"body":{"index.html":{}}}],["client.on('levelup",{"_index":270,"title":{},"body":{"index.html":{}}}],["come",{"_index":269,"title":{},"body":{"index.html":{}}}],["connect",{"_index":107,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["const",{"_index":134,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["continue",{"_index":146,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["coverage",{"_index":200,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":77,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["createmember",{"_index":20,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["createmember(userid",{"_index":75,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["customizable",{"_index":231,"title":{},"body":{"index.html":{}}}],["database",{"_index":39,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["default",{"_index":58,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["delete",{"_index":84,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deleted",{"_index":85,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["deletemember",{"_index":21,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["deletemember(userid",{"_index":82,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["dependencies",{"_index":210,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["development",{"_index":228,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":22,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["disconnects",{"_index":88,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["discord",{"_index":215,"title":{},"body":{"index.html":{},"properties.html":{}}}],["discord.js",{"_index":34,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["discordrankup",{"_index":1,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["documentation",{"_index":201,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":143,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["don't",{"_index":79,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["done",{"_index":250,"title":{},"body":{"index.html":{}}}],["early",{"_index":227,"title":{},"body":{"index.html":{}}}],["easy",{"_index":220,"title":{},"body":{"index.html":{}}}],["emit",{"_index":50,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitevent",{"_index":45,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["emitted",{"_index":196,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["event",{"_index":52,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["events",{"_index":195,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["exclude",{"_index":161,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["exec",{"_index":173,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exist",{"_index":80,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exists",{"_index":132,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["export",{"_index":122,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["false",{"_index":136,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["features",{"_index":223,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":23,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["fetch(userid",{"_index":90,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetchleaderboard",{"_index":24,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetchleaderboard(guildid",{"_index":94,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["few",{"_index":267,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["find(query",{"_index":167,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["first",{"_index":244,"title":{},"body":{"index.html":{}}}],["following",{"_index":262,"title":{},"body":{"index.html":{}}}],["function",{"_index":68,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["gain",{"_index":256,"title":{},"body":{"index.html":{}}}],["getlevelfromxp",{"_index":25,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getlevelfromxp(xp",{"_index":99,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["getting",{"_index":213,"title":{"index.html":{}},"body":{}}],["guild",{"_index":62,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["guild's",{"_index":255,"title":{},"body":{"index.html":{}}}],["guildid",{"_index":42,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["guildid)this",{"_index":260,"title":{},"body":{"index.html":{}}}],["here",{"_index":241,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":280,"title":{},"body":{"properties.html":{}}}],["https://discord",{"_index":281,"title":{},"body":{"properties.html":{}}}],["https://github.com/x404dev/discord",{"_index":284,"title":{},"body":{"properties.html":{}}}],["id",{"_index":61,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["identifier",{"_index":202,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":162,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["import",{"_index":118,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["include",{"_index":188,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["init",{"_index":26,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["init(url",{"_index":102,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initialize",{"_index":105,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["initiate",{"_index":246,"title":{},"body":{"index.html":{}}}],["install",{"_index":236,"title":{},"body":{"index.html":{}}}],["installation",{"_index":234,"title":{},"body":{"index.html":{}}}],["interface",{"_index":185,"title":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":186,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"overview.html":{}}}],["isc",{"_index":287,"title":{},"body":{"properties.html":{}}}],["keywords",{"_index":279,"title":{},"body":{"properties.html":{}}}],["leaderboard",{"_index":98,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["leaderboard.includes(member",{"_index":177,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboard.push(member",{"_index":178,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboard.sort((a",{"_index":179,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["leaderboardquery",{"_index":96,"title":{"interfaces/LeaderboardQuery.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["less",{"_index":154,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["level",{"_index":67,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levels",{"_index":53,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["levelup",{"_index":51,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["license",{"_index":286,"title":{},"body":{"properties.html":{}}}],["lightweight",{"_index":230,"title":{},"body":{"index.html":{}}}],["limit",{"_index":189,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["limit(options?.limit",{"_index":170,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["list",{"_index":191,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["make",{"_index":224,"title":{},"body":{"index.html":{}}}],["manager",{"_index":10,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["managing",{"_index":252,"title":{},"body":{"index.html":{}}}],["many",{"_index":222,"title":{},"body":{"index.html":{}}}],["matching",{"_index":184,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(0.1",{"_index":156,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["math.sqrt(xp",{"_index":157,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member",{"_index":78,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["member's",{"_index":81,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["members",{"_index":158,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["membertoupdate",{"_index":142,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.level",{"_index":151,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.save",{"_index":153,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.xp",{"_index":149,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["message",{"_index":194,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["method",{"_index":263,"title":{},"body":{"index.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["model",{"_index":133,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["models/xpmember",{"_index":120,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["modules",{"_index":273,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongodb",{"_index":38,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["mongoose",{"_index":119,"title":{},"body":{"classes/DiscordRankup.html":{},"dependencies.html":{}}}],["mongoose.connect(url",{"_index":129,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.connectoptions",{"_index":103,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.disconnect",{"_index":130,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongourl",{"_index":16,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["more",{"_index":268,"title":{},"body":{"index.html":{}}}],["name",{"_index":56,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["need",{"_index":245,"title":{},"body":{"index.html":{}}}],["new",{"_index":73,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["newmember",{"_index":137,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.save",{"_index":139,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["nin",{"_index":165,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["note",{"_index":226,"title":{},"body":{"index.html":{}}}],["npm",{"_index":235,"title":{},"body":{"index.html":{}}}],["number",{"_index":44,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["object",{"_index":93,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["optional",{"_index":57,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"index.html":{}}}],["options",{"_index":95,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["options.exclude",{"_index":163,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options.include.foreach(async",{"_index":175,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options?.exclude",{"_index":166,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options?.include",{"_index":174,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["overview",{"_index":274,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":106,"title":{"dependencies.html":{},"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["param",{"_index":123,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["pnpm",{"_index":238,"title":{},"body":{"index.html":{}}}],["private",{"_index":13,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["promise",{"_index":72,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["public",{"_index":124,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["query",{"_index":164,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["range",{"_index":160,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["ranks",{"_index":198,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["rankup",{"_index":199,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["rankup.js.org",{"_index":282,"title":{},"body":{"properties.html":{}}}],["rankup/issues",{"_index":285,"title":{},"body":{"properties.html":{}}}],["rankupdocumentation",{"_index":239,"title":{},"body":{"index.html":{}}}],["rankupevents",{"_index":197,"title":{"interfaces/RankupEvents.html":{}},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["remove",{"_index":110,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp",{"_index":27,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp(userid",{"_index":108,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["repository",{"_index":288,"title":{},"body":{"properties.html":{}}}],["require('discord",{"_index":247,"title":{},"body":{"index.html":{}}}],["reset",{"_index":113,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp",{"_index":28,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resetxp(userid",{"_index":111,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["resolve",{"_index":145,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["results",{"_index":183,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":127,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["save",{"_index":138,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["set",{"_index":117,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp",{"_index":29,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp(userid",{"_index":115,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["simple",{"_index":278,"title":{},"body":{"properties.html":{}}}],["skip",{"_index":190,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["skip(options?.skip",{"_index":172,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["snowflake",{"_index":41,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["something",{"_index":271,"title":{},"body":{"index.html":{}}}],["sort",{"_index":168,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["specified",{"_index":101,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts",{"_index":6,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["src/index.ts:102",{"_index":47,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:142",{"_index":109,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:16",{"_index":36,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:181",{"_index":116,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:21",{"_index":33,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:219",{"_index":112,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:232",{"_index":100,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:243",{"_index":91,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:258",{"_index":97,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:30",{"_index":104,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:46",{"_index":87,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:57",{"_index":76,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/index.ts:81",{"_index":83,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/types/types.ts",{"_index":187,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["start",{"_index":251,"title":{},"body":{"index.html":{}}}],["started",{"_index":214,"title":{"index.html":{}},"body":{}}],["statements",{"_index":203,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["string",{"_index":35,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["successfully",{"_index":86,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["system",{"_index":217,"title":{},"body":{"index.html":{},"properties.html":{}}}],["table",{"_index":209,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":208,"title":{},"body":{"coverage.html":{}}}],["this.client",{"_index":126,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.client.emit('levelup",{"_index":152,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.createmember(userid",{"_index":147,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.fetch(id",{"_index":176,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.getlevelfromxp(membertoupdate.xp",{"_index":150,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.mongourl",{"_index":125,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.setxp(userid",{"_index":155,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["true",{"_index":64,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["type",{"_index":30,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["types",{"_index":272,"title":{},"body":{"index.html":{}}}],["types/types",{"_index":121,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["unique",{"_index":225,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":89,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["up",{"_index":54,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["update",{"_index":148,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["url",{"_index":37,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["usage",{"_index":243,"title":{},"body":{"index.html":{}}}],["use",{"_index":221,"title":{},"body":{"index.html":{}}}],["user",{"_index":49,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["user's",{"_index":74,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["userid",{"_index":60,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["userids",{"_index":192,"title":{},"body":{"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["uses",{"_index":232,"title":{},"body":{"index.html":{}}}],["value",{"_index":59,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["version",{"_index":276,"title":{},"body":{"properties.html":{}}}],["very",{"_index":219,"title":{},"body":{"index.html":{}}}],["view",{"_index":240,"title":{},"body":{"index.html":{}}}],["wait",{"_index":144,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["want",{"_index":261,"title":{},"body":{"index.html":{}}}],["whether",{"_index":65,"title":{},"body":{"classes/DiscordRankup.html":{},"index.html":{}}}],["within",{"_index":159,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["x404dev",{"_index":290,"title":{},"body":{"properties.html":{}}}],["xp",{"_index":43,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{},"properties.html":{}}}],["xp.addxp(userid",{"_index":253,"title":{},"body":{"index.html":{}}}],["xp.createmember(userid",{"_index":264,"title":{},"body":{"index.html":{}}}],["xp.deletemember(userid",{"_index":266,"title":{},"body":{"index.html":{}}}],["xp.init(\"mongourl",{"_index":248,"title":{},"body":{"index.html":{}}}],["xp.removexp(userid",{"_index":257,"title":{},"body":{"index.html":{}}}],["xpamount",{"_index":254,"title":{},"body":{"index.html":{}}}],["xpmember",{"_index":92,"title":{"interfaces/XPMember.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/LeaderboardQuery.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"index.html":{}}}],["xpmember.findone",{"_index":135,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["xpmember.findoneanddelete",{"_index":141,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["yarn",{"_index":237,"title":{},"body":{"index.html":{}}}],["yes",{"_index":66,"title":{},"body":{"classes/DiscordRankup.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DiscordRankup.html":{"url":"classes/DiscordRankup.html","title":"class - DiscordRankup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordRankup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                The main class for DiscordRankup, acts as a manager.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                client\n                            \n                            \n                                    Private\n                                    Static\n                                mongoURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                addXP\n                            \n                            \n                                    Static\n                                    Async\n                                createMember\n                            \n                            \n                                    Static\n                                    Async\n                                deleteMember\n                            \n                            \n                                    Static\n                                    Async\n                                disconnect\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Static\n                                    Async\n                                fetchLeaderboard\n                            \n                            \n                                    Static\n                                getLevelFromXP\n                            \n                            \n                                    Static\n                                    Async\n                                init\n                            \n                            \n                                    Static\n                                    Async\n                                removeXP\n                            \n                            \n                                    Static\n                                    Async\n                                resetXP\n                            \n                            \n                                    Static\n                                    Async\n                                setXP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:21\n                        \n                    \n\n            \n                \n                    The Discord.js client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        mongoURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:16\n                        \n                    \n\n            \n                \n                    The URL to the MongoDB database\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        addXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    addXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:102\n                \n            \n\n\n            \n                \n                    Add XP to the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to add\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        createMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:57\n                \n            \n\n\n            \n                \n                    Create a member in the database if they don't exist\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        deleteMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:81\n                \n            \n\n\n            \n                \n                    Delete a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Whether the member was deleted successfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:46\n                \n            \n\n\n            \n                \n                    Disconnects from the database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The promise to disconnect from the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:243\n                \n            \n\n\n            \n                \n                    fetch a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XPMember object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        fetchLeaderboard\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLeaderboard(guildID: string | Snowflake, options?: LeaderboardQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:258\n                \n            \n\n\n            \n                \n                    Fetch the leaderboard\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                LeaderboardQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the leaderboard\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The leaderboard\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getLevelFromXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLevelFromXP(xp: number)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:232\n                \n            \n\n\n            \n                \n                    Returns a level from a specified XP amount\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XP amount\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The level\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(url: string, client: Client, options?: mongoose.ConnectOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:30\n                \n            \n\n\n            \n                \n                    Initialize the package and connect to the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The URL to the MongoDB database\n\n                                    \n                                \n                                \n                                    client\n                                    \n                                            Client\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Discord.js client\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            mongoose.ConnectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options to connect to the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The promise to connect to the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        removeXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:142\n                \n            \n\n\n            \n                \n                    Remove XP from the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to remove\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        resetXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetXP(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:219\n                \n            \n\n\n            \n                \n                    Reset the user's XP to 0\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        setXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/index.ts:181\n                \n            \n\n\n            \n                \n                    Set the user's XP and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to set\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import mongoose from 'mongoose';\nimport xpmember from './models/xpmember';\nimport { LeaderboardQuery, XPMember } from './types/types';\nimport { Client, Snowflake } from 'discord.js';\n\n/**\n * The main class for DiscordRankup, acts as a manager.\n * @class DiscordRankup\n * @description The main class for DiscordRankup, acts as a manager.\n */\nexport default class DiscordRankup {\n  /**\n   * The URL to the MongoDB database\n   * @type {string}\n   */\n  private static mongoURL: string;\n  /**\n   * The Discord.js client\n   * @type {Client}\n   */\n  private static client: Client;\n  /**\n   * Initialize the package and connect to the database\n   * @param url The URL to the MongoDB database\n   * @param client The Discord.js client\n   * @param options The options to connect to the database\n   * @returns {Promise} The promise to connect to the database\n   * @description Initialize the package and connect to the database\n   */\n  public static async init(\n    url: string,\n    client: Client,\n    options?: mongoose.ConnectOptions,\n  ) {\n    // Connect to the database\n    this.mongoURL = url;\n    this.client = client;\n    return await mongoose.connect(url, options);\n  }\n\n  /**\n   * Disconnects from the database\n   * @returns {Promise} The promise to disconnect from the database\n   * @description Disconnects from the database\n   */\n  public static async disconnect() {\n    return await mongoose.disconnect();\n  }\n\n  /**\n   * Create a member in the database if they don't exist\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XP\n   * @description Create a member in the database if they don't exist\n   */\n  public static async createMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    // Check if the member exists on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    if (member) return false;\n    // Create a new member on mongoDB with XPMember model\n    const newMember = new xpmember({\n      UserID: userID,\n      GuildID: guildID,\n      XP: 0,\n      Level: 0,\n    });\n    // Save the member to the database\n    return newMember.save();\n  }\n\n  /**\n   * Delete a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {boolean} Whether the member was deleted successfully\n   */\n  public static async deleteMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    //delete the member from the database\n    const member = await xpmember.findOneAndDelete({\n      UserID: userID,\n      GuildID: guildID,\n    });\n    return !!member;\n  }\n\n  /**\n   * Add XP to the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to add\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   */\n  public static async addXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Add xp to the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP\n    memberToUpdate.XP += xp;\n    const level = this.getLevelFromXP(memberToUpdate.XP);\n    // Emit levelUp event if the user levels up\n    if (level > memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Remove XP from the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to remove\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   * @description Remove XP from the user\n   */\n  public static async removeXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Remove xp from the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP, if the user has less XP than the amount to remove, set it to 0\n    memberToUpdate.XP = memberToUpdate.XP - xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Set the user's XP and emit the levelUp event if the user levels up\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @param {number} xp The amount of XP to set\n   * @param {Boolean} emitEvent Whether to emit the levelUp event\n   * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns {number} The new amount of user's XP\n   */\n  public static async setXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    if (xp  memberToUpdate.Level && emitEvent) {\n      this.client.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Reset the user's XP to 0\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {number} The new amount of user's XP\n   * @description Reset the user's XP to 0\n   */\n  public static async resetXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    return this.setXP(userID, guildID, 0);\n  }\n\n  /**\n   * Returns a level from a specified XP amount\n   * @param {number} xp The XP amount\n   * @returns {number} The level\n   * @description Returns a level from a specified XP amount\n   */\n  public static getLevelFromXP(xp: number): number {\n    return Math.floor(0.1 * Math.sqrt(xp));\n  }\n\n  /**\n   * fetch a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XPMember object\n   * @description Get the member's XP\n   */\n  public static async fetch(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    const member = xpmember.findOne({ UserID: userID, GuildID: guildID });\n    return member;\n  }\n\n  /**\n   * Fetch the leaderboard\n   * @param {string} guildID The ID of the guild\n   * @param {LeaderboardQuery} options The options for the leaderboard\n   * @returns {XPMember[]} The leaderboard\n   * @description Fetch the leaderboard\n   */\n  public static async fetchLeaderboard(\n    guildID: string | Snowflake,\n    options?: LeaderboardQuery,\n  ): Promise {\n    // Fetch the members with the most xp within range and exclude the ids from options.exclude\n\n    const query = {\n      GuildID: guildID,\n      UserID: { $nin: options?.exclude || [] },\n    };\n\n    const leaderboard: XPMember[] = await xpmember\n      .find(query)\n      .sort({ XP: -1 })\n      .limit(options?.limit || 10)\n      .skip(options?.skip || 0)\n      .exec();\n\n    if (options?.include) {\n      options.include.forEach(async (id) => {\n        const member = await this.fetch(id, guildID);\n        if (member && !leaderboard.includes(member)) leaderboard.push(member);\n      });\n    }\n\n    return leaderboard.sort((a, b) => b.XP - a.XP);\n  }\n}\n\nexport * from './types/types';\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeaderboardQuery.html":{"url":"interfaces/LeaderboardQuery.html","title":"interface - LeaderboardQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeaderboardQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The options for a leaderboard query to the database\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exclude\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skip\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exclude\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exclude:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    list of userIDs to exclude from the leaderboard if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    list of userIDs to include in the leaderboard if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The amount of members to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skip:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The amount of members to skip\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */ \nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n  /** The event emitted when a user ranks up */\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RankupEvents.html":{"url":"interfaces/RankupEvents.html","title":"interface - RankupEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RankupEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The events emitted by DiscordRankup\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            levelUp\n                                        \n                                \n                                \n                                        \n                                            rankUp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        levelUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event emitted when a user levels up\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rankUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rankUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The event emitted when a user ranks up\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */ \nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n  /** The event emitted when a user ranks up */\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/XPMember.html":{"url":"interfaces/XPMember.html","title":"interface - XPMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  XPMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n            \n                Description\n            \n            \n                The model of a member in the database\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            GuildID\n                                        \n                                \n                                \n                                        \n                                            Level\n                                        \n                                \n                                \n                                        \n                                            UserID\n                                        \n                                \n                                \n                                        \n                                            XP\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        GuildID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        GuildID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the Guild\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The level of the user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        UserID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        UserID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the User\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        XP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        XP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The amount of XP the user has\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\n\n/**\n * The model of a member in the database\n * @interface XPMember\n * @description The model of a member in the database\n */\nexport interface XPMember {\n  /** The ID of the User */\n  UserID: string;\n  /** The ID of the Guild */\n  GuildID: string;\n  /** The amount of XP the user has */\n  XP: number;\n  /** The level of the user */\n  Level: number;\n}\n\n/**\n * The options for a leaderboard query to the database\n * @interface LeaderboardQuery\n * @description The options for a leaderboard query to the database\n */ \nexport interface LeaderboardQuery {\n  /** The amount of members to fetch */\n  limit?: number;\n  /** The amount of members to skip */\n  skip?: number;\n  /** list of userIDs to exclude from the leaderboard if any */\n  exclude?: string[];\n  /** list of userIDs to include in the leaderboard if any */\n  include?: string[];\n}\n\n/**\n * The events emitted by DiscordRankup\n * @interface RankupEvents\n * @description The events emitted by DiscordRankup\n */\nexport interface RankupEvents {\n  /** The event emitted when a user levels up */\n  levelUp: [member: XPMember, cause?: any];\n  /** The event emitted when a user ranks up */\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/index.ts\n            \n            class\n            DiscordRankup\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            LeaderboardQuery\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            RankupEvents\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            XPMember\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            discord.js : ^14.8.0\n        \n            mongoose : ^7.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDiscord-RankUP\nDiscord-RankUP is a package that allows you to create a rankup system for your discord bot.\nIt is very easy to use and has a many features to make your rankup system unique!\nNote: This package is in early development, not all features have been added yet!\nFeatures\n\nLightweight\nEasy to use\nCustomizable\nUses MongoDB\nBuilt for Discord.Js\n\nInstallation\nnpm install discord-rankup\nyarn add discord-rankup\npnpm add discord-rankupDocumentation\nView the documentation here\nBasic Usage\nFirst you need to initiate the Rankup Client.\nconst xp = require('discord-rankup');\n\nxp.init(\"MONGOURL\", client);Once that is done, you can start managing the user's XP.\nxp.addXP(userID, guildID, xpAmount, emitEvent, cause)\nuserID: The user's ID\nguildID: The guild's ID\nxpAmount: The amount of XP to add\nemitEvent (optional, true by default): Whether or not to emit the event if the user levels up\ncause (optional): The cause of the XP gain, can be any object, it will be emitted in the event\n\nxp.removeXP(userID, guildID, xpAmount, emitEvent, cause)xp.setXP(userID, guildID, xpAmount, emitEvent, cause)xp.fetchXP(userID, guildID)This will return a promise with the user's XP.\nIf you want to add the user to the database, you can use the following method.\nxp.createMember(userID, guildID)This will create a user in the database, if the user already exists, it will return false.\nxp.deleteMember(userID, guildID)This will delete the user from the database, if the user was deleted, it will return true.\nEvents\nDiscord-RankUP has a few events that you can use.\n\nlevelUp: Emitted when a user levels up\n(More to come)\n\nclient.on('levelUp', (XPMember, cause) => {\n    // Do something\n})Types\ninterface XPMember {\n    userID: string;\n    guildID: string;\n    xp: number;\n    level: number;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.9.3\n        \n            Description : A simple discord.js xp and level system\n        \n            Keywords : discord, discord.js, ranks, levels, xp\n        \n            Homepage : https://discord-rankup.js.org/\n        \n            Bugs : https://github.com/x404dev/discord-rankup/issues\n        \n            License : ISC\n        \n            Repository : https://github.com/x404dev/discord-rankup\n        \n            Author : x404dev\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
