var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/DiscordRankup.html",[0,0.848,1,1.115]],["body/classes/DiscordRankup.html",[0,0.245,1,0.566,2,0.583,3,0.323,4,0.323,5,0.245,6,0.426,7,1.023,8,1.367,9,0.184,10,0.322,11,1.367,12,1.367,13,1.023,14,3.227,15,3.227,16,1.367,17,1.367,18,1.367,19,1.643,20,1.87,21,1.367,22,1.367,23,1.367,24,1.567,25,1.023,26,0.7,27,0.109,28,1.517,29,0.583,30,3.482,31,1.473,32,1.154,33,1.126,34,2.899,35,1.721,36,0.583,37,1.367,38,3.349,39,2.676,40,1.481,41,1.481,42,2.22,43,1.481,44,2.06,45,2.06,46,2.06,47,0.999,48,0.999,49,1.887,50,1.409,51,3.191,52,2.583,53,1.505,54,1.643,55,2.832,56,2.758,57,0.993,58,2.676,59,2.358,60,1.023,61,1.643,62,1.367,63,0.583,64,1.87,65,2.06,66,2.676,67,1.023,68,1.201,69,1.023,70,0.583,71,0.583,72,2.22,73,0.583,74,0.583,75,0.583,76,1.786,77,0.587,78,1.023,79,0.583,80,0.583,81,2.22,82,1.643,83,1.087,84,0.909,85,0.909,86,0.909,87,0.583,88,0.583,89,1.87,90,1.035,91,0.583,92,0.583,93,0.583,94,0.184,95,0.323,96,0.583,97,1.695,98,0.583,99,2.358,100,2.583,101,0.583,102,0.583,103,0.583,104,1.643,105,0.583,106,1.367,107,0.583,108,0.583,109,1.643,110,2.358,111,1.643,112,0.583,113,1.87,114,0.999,115,1.643,116,0.583,117,2.478,118,1.023,119,1.023,120,1.023,121,1.023,122,1.023,123,1.023,124,2.06,125,0.583,126,0.583,127,2.06,128,1.367,129,1.367,130,0.583,131,0.583,132,0.028,133,0.028]],["title/interfaces/RankupEvents.html",[134,0.635,135,0.848]],["body/interfaces/RankupEvents.html",[3,1.174,4,1.174,5,0.893,9,0.669,10,0.887,24,1.557,26,0.887,27,0.109,28,1.184,31,0.893,32,0.995,33,1.184,35,1.989,40,1.86,41,1.557,43,1.86,50,0.893,76,1.989,77,0.794,83,1.184,84,1.557,85,1.557,86,1.557,90,1.174,94,0.669,95,1.557,97,1.86,132,0.076,133,0.076,134,0.887,135,1.184,136,1.174,137,1.174,138,2.456,139,1.551,140,1.551,141,1.551,142,1.551,143,1.551,144,1.551,145,1.551]],["title/interfaces/XPMember.html",[77,0.458,134,0.635]],["body/interfaces/XPMember.html",[3,1.139,4,1.139,5,0.867,9,0.649,10,0.869,24,1.526,26,1.047,27,0.108,28,1.5,31,1.398,32,1.123,33,1.5,35,1.972,40,1.139,41,1.526,43,1.838,50,1.398,76,1.972,77,0.809,83,1.457,84,1.526,85,1.526,86,1.526,90,1.139,94,0.649,95,1.526,97,1.838,132,0.075,133,0.075,134,0.869,135,0.867,136,1.139,137,1.139,138,1.505,139,1.505,140,1.505,141,1.505,142,1.505,143,1.505,144,1.505,145,1.505]],["title/coverage.html",[146,1.986]],["body/coverage.html",[0,1.145,1,1.505,5,1.145,6,1.988,26,0.857,27,0.104,57,1.145,77,0.748,114,2.589,132,0.089,133,0.089,134,1.038,135,1.145,137,1.823,146,1.988,147,2.72,148,2.72,149,2.72,150,2.72,151,2.72,152,1.988,153,2.72,154,2.72,155,2.72,156,2.72,157,2.72,158,2.72]],["title/dependencies.html",[159,1.241,160,1.764]],["body/dependencies.html",[27,0.103,68,2.213,94,0.954,132,0.095,133,0.095,160,2.213,161,3.029,162,3.029]],["title/index.html",[9,0.635,163,1.472]],["body/index.html",[0,1.286,27,0.095,132,0.095,133,0.095,136,1.691,163,2.233,164,3.055,165,3.055]],["title/modules.html",[166,1.986]],["body/modules.html",[27,0.096,132,0.096,133,0.096,166,2.273]],["title/properties.html",[10,0.761,159,1.241]],["body/properties.html",[10,0.911,27,0.105,32,0.911,49,2.112,57,1.216,94,0.911,132,0.092,133,0.092,167,2.89,168,2.89,169,2.89,170,2.89,171,2.89,172,2.89,173,2.89,174,2.89,175,2.89]],["title/miscellaneous/variables.html",[176,1.241,177,1.764]],["body/miscellaneous/variables.html",[9,0.831,26,1.148,27,0.108,28,1.361,31,1.11,32,0.831,33,1.361,47,1.927,48,1.927,50,1.11,53,2.662,57,1.11,77,0.734,83,1.11,132,0.087,133,0.087,152,1.927,176,1.927,177,1.927,178,2.638,179,2.638,180,3.643]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":114,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["0.9.0",{"_index":168,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":154,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":155,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":156,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":164,"title":{},"body":{"index.html":{}}}],["14.8.0",{"_index":161,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":165,"title":{},"body":{"index.html":{}}}],["4/10",{"_index":151,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":150,"title":{},"body":{"coverage.html":{}}}],["7.0.1",{"_index":162,"title":{},"body":{"dependencies.html":{}}}],["add",{"_index":37,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["addxp",{"_index":16,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["addxp(userid",{"_index":29,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["affecting",{"_index":85,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["amount",{"_index":58,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["author",{"_index":174,"title":{},"body":{"properties.html":{}}}],["await",{"_index":100,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["baseinteraction",{"_index":139,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["called",{"_index":86,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["cause",{"_index":35,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["check",{"_index":107,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["class",{"_index":0,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["connect",{"_index":17,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["connect(url",{"_index":60,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["connection",{"_index":69,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["const",{"_index":110,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["continue",{"_index":121,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["coverage",{"_index":146,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":104,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["createmember",{"_index":18,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["createmember(userid",{"_index":70,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["database",{"_index":66,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["default",{"_index":47,"title":{},"body":{"classes/DiscordRankup.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":49,"title":{},"body":{"classes/DiscordRankup.html":{},"properties.html":{}}}],["disconnect",{"_index":19,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["disconnects",{"_index":102,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["discord",{"_index":170,"title":{},"body":{"properties.html":{}}}],["discord.js",{"_index":94,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"dependencies.html":{},"properties.html":{}}}],["discordrankup",{"_index":1,"title":{"classes/DiscordRankup.html":{}},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["discordrankup#levelup",{"_index":141,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["discordrankup#rankup",{"_index":143,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["documentation",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":118,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["don't",{"_index":105,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["emit",{"_index":39,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["emitevent",{"_index":34,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["event",{"_index":41,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["eventemitter",{"_index":8,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["events",{"_index":91,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exist",{"_index":106,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["exists",{"_index":108,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["export",{"_index":95,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["extends",{"_index":7,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["false",{"_index":112,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetch",{"_index":20,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["fetch(userid",{"_index":74,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["function",{"_index":84,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["guild",{"_index":52,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["guildid",{"_index":31,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":51,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["identifier",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":90,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["interface",{"_index":134,"title":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["interfaces",{"_index":136,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"index.html":{}}}],["isc",{"_index":173,"title":{},"body":{"properties.html":{}}}],["less",{"_index":130,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["level",{"_index":83,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["leveled",{"_index":142,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["levels",{"_index":42,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["levelup",{"_index":40,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["license",{"_index":172,"title":{},"body":{"properties.html":{}}}],["matching",{"_index":133,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(0.05",{"_index":125,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["math.sqrt(xp",{"_index":126,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["member",{"_index":76,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["member's",{"_index":72,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate",{"_index":117,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.level",{"_index":127,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.save",{"_index":129,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["membertoupdate.xp",{"_index":124,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["message",{"_index":140,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["miscellaneous",{"_index":176,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":109,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["models/xpmember",{"_index":92,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["modern",{"_index":169,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":166,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mongodb",{"_index":65,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose",{"_index":68,"title":{},"body":{"classes/DiscordRankup.html":{},"dependencies.html":{}}}],["mongoose.connect(url",{"_index":101,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.connectoptions",{"_index":62,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.disconnect",{"_index":103,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["mongoose.schema",{"_index":179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongourl",{"_index":12,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["name",{"_index":45,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["new",{"_index":57,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":113,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["newmember.save",{"_index":116,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["number",{"_index":33,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":78,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["optional",{"_index":46,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["options",{"_index":61,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["overview",{"_index":163,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":159,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":97,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["parameters",{"_index":44,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["private",{"_index":11,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["promise",{"_index":56,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["rank",{"_index":145,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["ranked",{"_index":144,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["rankup",{"_index":138,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["rankupevents",{"_index":135,"title":{"interfaces/RankupEvents.html":{}},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["remove",{"_index":81,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp",{"_index":21,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["removexp(userid",{"_index":79,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["required",{"_index":180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolve",{"_index":120,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["results",{"_index":132,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":99,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["returns",{"_index":55,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["save",{"_index":115,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["set",{"_index":89,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp",{"_index":22,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["setxp(userid",{"_index":87,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["snowflake",{"_index":30,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["src/.../xpmember.ts",{"_index":178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/discordrankup.ts",{"_index":6,"title":{},"body":{"classes/DiscordRankup.html":{},"coverage.html":{}}}],["src/discordrankup.ts:101",{"_index":80,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:141",{"_index":88,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:179",{"_index":75,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:18",{"_index":63,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:27",{"_index":73,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:37",{"_index":71,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:61",{"_index":36,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/discordrankup.ts:8",{"_index":25,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["src/models/xpmember.ts",{"_index":152,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/types/types.ts",{"_index":137,"title":{},"body":{"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{}}}],["statements",{"_index":149,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":28,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":96,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["system",{"_index":171,"title":{},"body":{"properties.html":{}}}],["table",{"_index":158,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":157,"title":{},"body":{"coverage.html":{}}}],["this.createmember(userid",{"_index":122,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.emit('levelup",{"_index":128,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["this.mongourl",{"_index":98,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["true",{"_index":53,"title":{},"body":{"classes/DiscordRankup.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":26,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/types",{"_index":93,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["unknown",{"_index":67,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["up",{"_index":43,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{}}}],["update",{"_index":123,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["url",{"_index":64,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["user",{"_index":38,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["user's",{"_index":59,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["userid",{"_index":50,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":48,"title":{},"body":{"classes/DiscordRankup.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":153,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":177,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":167,"title":{},"body":{"properties.html":{}}}],["wait",{"_index":119,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["whether",{"_index":82,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["x404dev",{"_index":175,"title":{},"body":{"properties.html":{}}}],["xp",{"_index":32,"title":{},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["xpmember",{"_index":77,"title":{"interfaces/XPMember.html":{}},"body":{"classes/DiscordRankup.html":{},"interfaces/RankupEvents.html":{},"interfaces/XPMember.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["xpmember.findone",{"_index":111,"title":{},"body":{"classes/DiscordRankup.html":{}}}],["yes",{"_index":54,"title":{},"body":{"classes/DiscordRankup.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DiscordRankup.html":{"url":"classes/DiscordRankup.html","title":"class - DiscordRankup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordRankup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/DiscordRankup.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mongoURL\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addXP\n                            \n                            \n                                    Public\n                                    Async\n                                connect\n                            \n                            \n                                    Public\n                                    Async\n                                createMember\n                            \n                            \n                                    Public\n                                    Async\n                                disconnect\n                            \n                            \n                                    Public\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                removeXP\n                            \n                            \n                                    Public\n                                    Async\n                                setXP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/DiscordRankup.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mongoURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/DiscordRankup.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        addXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    addXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:61\n                \n            \n\n\n            \n                \n                    Add XP to the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(url: string, options?: mongoose.ConnectOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The URL to the MongoDB database\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            mongoose.ConnectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        mongoose connection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMember(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        fetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(userID: string | Snowflake, guildID: string | Snowflake)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:179\n                \n            \n\n\n            \n                \n                    fetch a member from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The member's XPMember object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:101\n                \n            \n\n\n            \n                \n                    Remove XP from the user and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to remove\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setXP\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXP(userID: string | Snowflake, guildID: string | Snowflake, xp: number, emitEvent, cause?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/DiscordRankup.ts:141\n                \n            \n\n\n            \n                \n                    Set the user's XP and emit the levelUp event if the user levels up\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the user\n\n                                    \n                                \n                                \n                                    guildID\n                                    \n                                            string | Snowflake\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The ID of the guild\n\n                                    \n                                \n                                \n                                    xp\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The amount of XP to set\n\n                                    \n                                \n                                \n                                    emitEvent\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        Whether to emit the levelUp event\n\n                                    \n                                \n                                \n                                    cause\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The cause of the level up, defined when a function affecting the xp is called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The new amount of user's XP\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import mongoose from 'mongoose';\nimport EventEmitter from 'events';\nimport xpmember from './models/xpmember';\nimport { XPMember } from './types/types';\nimport { Snowflake } from 'discord.js';\n\nexport class DiscordRankup extends EventEmitter {\n  private mongoURL: string;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * @param url The URL to the MongoDB database\n   * @returns mongoose connection\n   */\n  public async connect(url: string, options?: mongoose.ConnectOptions) {\n    // Connect to the database\n    this.mongoURL = url;\n    return await mongoose.connect(url, options);\n  }\n\n  /**\n   * @description Disconnects from the database\n   */\n  public async disconnect() {\n    return await mongoose.disconnect();\n  }\n\n  /**\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @returns The member's XP\n   * @description Create a member in the database if they don't exist\n   */\n  public async createMember(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    // Check if the member exists on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    if (member) return false;\n    // Create a new member on mongoDB with XPMember model\n    const newMember = new xpmember({\n      UserID: userID,\n      GuildID: guildID,\n      XP: 0,\n      Level: 0,\n    });\n    // Save the member to the database\n    return newMember.save();\n  }\n\n  /**\n   * Add XP to the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @returns The new amount of user's XP\n   */\n  public async addXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Add xp to the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP\n    memberToUpdate.XP += xp;\n    const level = Math.floor(0.05 * Math.sqrt(xp));\n    // Emit levelUp event if the user levels up\n    if (level > memberToUpdate.Level && emitEvent) {\n      this.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * Remove XP from the user and emit the levelUp event if the user levels up\n   * @param userID The ID of the user\n   * @param guildID The ID of the guild\n   * @param xp The amount of XP to remove\n   * @param emitEvent Whether to emit the levelUp event\n   * @param cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns The new amount of user's XP\n   * @description Remove XP from the user\n   */\n  public async removeXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    // Remove xp from the user on mongoDB with XPMember model\n    const member = await xpmember.findOne({ UserID: userID, GuildID: guildID });\n    let memberToUpdate;\n    //If the member doesn't exist, create them and wait for the promise to resolve to continue\n    if (!member) {\n      const newMember = await this.createMember(userID, guildID);\n      memberToUpdate = newMember;\n    } else {\n      memberToUpdate = member;\n    }\n    // Update the member's XP, if the user has less XP than the amount to remove, set it to 0\n    memberToUpdate.XP = memberToUpdate.XP - xp  memberToUpdate.Level && emitEvent) {\n      this.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n\n  /**\n   * Set the user's XP and emit the levelUp event if the user levels up\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @param {number} xp The amount of XP to set\n   * @param {boolean} emitEvent Whether to emit the levelUp event\n   * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n   * @returns {number} The new amount of user's XP\n   */\n  public async setXP(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n    xp: number,\n    emitEvent = true,\n    cause?: any,\n  ): Promise {\n    if (xp  memberToUpdate.Level && emitEvent) {\n      this.emit('levelUp', memberToUpdate, cause);\n    }\n    memberToUpdate.Level = level;\n    // Save the member to the database\n    await memberToUpdate.save();\n    return memberToUpdate.XP;\n  }\n\n  /**\n   * fetch a member from the database\n   * @param {string} userID The ID of the user\n   * @param {string} guildID The ID of the guild\n   * @returns {XPMember} The member's XPMember object\n   * @description Get the member's XP\n   */\n  public async fetch(\n    userID: string | Snowflake,\n    guildID: string | Snowflake,\n  ): Promise {\n    const member = xpmember.findOne({ UserID: userID, GuildID: guildID });\n    return member;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RankupEvents.html":{"url":"interfaces/RankupEvents.html","title":"interface - RankupEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RankupEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            levelUp\n                                        \n                                \n                                \n                                        \n                                            rankUp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        levelUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        levelUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rankUp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rankUp:     [, ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, ]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\nexport interface XPMember {\n  UserID: string;\n  GuildID: string;\n  XP: number;\n  Level: number;\n}\n\n/**\n * @event DiscordRankup#levelUp\n * @param {XPMember} member The member who leveled up\n * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n */\n\n/**\n * @event DiscordRankup#rankUp\n * @param {XPMember} member The member who ranked up\n * @param {any} cause The cause of the rank up, defined when a function affecting the xp is called\n */\n\nexport interface RankupEvents {\n  levelUp: [member: XPMember, cause?: any];\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/XPMember.html":{"url":"interfaces/XPMember.html","title":"interface - XPMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  XPMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            GuildID\n                                        \n                                \n                                \n                                        \n                                            Level\n                                        \n                                \n                                \n                                        \n                                            UserID\n                                        \n                                \n                                \n                                        \n                                            XP\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        GuildID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        GuildID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        UserID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        UserID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        XP\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        XP:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseInteraction, Message } from 'discord.js';\n\nexport interface XPMember {\n  UserID: string;\n  GuildID: string;\n  XP: number;\n  Level: number;\n}\n\n/**\n * @event DiscordRankup#levelUp\n * @param {XPMember} member The member who leveled up\n * @param {any} cause The cause of the level up, defined when a function affecting the xp is called\n */\n\n/**\n * @event DiscordRankup#rankUp\n * @param {XPMember} member The member who ranked up\n * @param {any} cause The cause of the rank up, defined when a function affecting the xp is called\n */\n\nexport interface RankupEvents {\n  levelUp: [member: XPMember, cause?: any];\n  rankUp: [member: XPMember, cause?: any];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/DiscordRankup.ts\n            \n            class\n            DiscordRankup\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                src/models/xpmember.ts\n            \n            variable\n            XPMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            RankupEvents\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/types.ts\n            \n            interface\n            XPMember\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            discord.js : ^14.8.0\n        \n            mongoose : ^7.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.9.0\n        \n            Description : The new modern Discord XP System for Discord.Js\n        \n            License : ISC\n        \n            Author : x404dev\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            XPMember   (src/.../xpmember.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/xpmember.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        XPMember\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n  UserID: { type: String, required: true },\n  GuildID: { type: String, required: true },\n  XP: { type: Number, required: true },\n  Level: { type: Number, required: true },\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
